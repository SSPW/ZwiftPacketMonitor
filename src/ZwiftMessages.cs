// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zwiftMessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ZwiftPacketMonitor {

  /// <summary>Holder for reflection information generated from zwiftMessages.proto</summary>
  public static partial class ZwiftMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for zwiftMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZwiftMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN6d2lmdE1lc3NhZ2VzLnByb3RvEhJad2lmdFBhY2tldE1vbml0b3IixgMK",
            "C1BsYXllclN0YXRlEgoKAmlkGAEgASgFEhEKCXdvcmxkVGltZRgCIAEoAxIQ",
            "CghkaXN0YW5jZRgDIAEoBRIQCghyb2FkVGltZRgEIAEoBRIMCgRsYXBzGAUg",
            "ASgFEg0KBXNwZWVkGAYgASgFEhQKDHJvYWRQb3NpdGlvbhgIIAEoBRISCgpj",
            "YWRlbmNlVUh6GAkgASgFEhEKCWhlYXJ0cmF0ZRgLIAEoBRINCgVwb3dlchgM",
            "IAEoBRIPCgdoZWFkaW5nGA0gASgDEgwKBGxlYW4YDiABKAUSEAoIY2xpbWJp",
            "bmcYDyABKAUSDAoEdGltZRgQIAEoBRILCgNmMTkYEyABKAUSCwoDZjIwGBQg",
            "ASgFEhAKCHByb2dyZXNzGBUgASgFEhcKD2N1c3RvbWlzYXRpb25JZBgWIAEo",
            "AxIUCgxqdXN0V2F0Y2hpbmcYFyABKAUSEAoIY2Fsb3JpZXMYGCABKAUSCQoB",
            "eBgZIAEoAhIQCghhbHRpdHVkZRgaIAEoAhIJCgF5GBsgASgCEhcKD3dhdGNo",
            "aW5nUmlkZXJJZBgcIAEoBRIPCgdncm91cElkGB0gASgFEg0KBXNwb3J0GB8g",
            "ASgDIuQBCg5DbGllbnRUb1NlcnZlchIRCgljb25uZWN0ZWQYASABKAUSEAoI",
            "cmlkZXJfaWQYAiABKAUSEgoKd29ybGRfdGltZRgDIAEoAxIuCgVzdGF0ZRgH",
            "IAEoCzIfLlp3aWZ0UGFja2V0TW9uaXRvci5QbGF5ZXJTdGF0ZRINCgVzZXFu",
            "bxgEIAEoBRIMCgR0YWc4GAggASgDEgwKBHRhZzkYCSABKAMSEwoLbGFzdF91",
            "cGRhdGUYCiABKAMSDQoFdGFnMTEYCyABKAMSGgoSbGFzdF9wbGF5ZXJfdXBk",
            "YXRlGAwgASgDIuIBCg1TZWdtZW50UmVzdWx0EgoKAmlkGAEgASgDEhAKCHJp",
            "ZGVyX2lkGAIgASgDEhkKEWV2ZW50X3N1Ymdyb3VwX2lkGAYgASgDEhIKCmZp",
            "cnN0X25hbWUYByABKAkSEQoJbGFzdF9uYW1lGAggASgJEhcKD2ZpbmlzaF90",
            "aW1lX3N0chgKIAEoCRISCgplbGFwc2VkX21zGAsgASgDEhIKCnBvd2VybWV0",
            "ZXIYDCABKAUSDgoGd2VpZ2h0GA0gASgFEg0KBXBvd2VyGA8gASgFEhEKCWhl",
            "YXJ0cmF0ZRgTIAEoBSKNAQoOU2VnbWVudFJlc3VsdHMSEAoId29ybGRfaWQY",
            "ASABKAMSEgoKc2VnbWVudF9pZBgCIAEoAxIZChFldmVudF9zdWJncm91cF9p",
            "ZBgDIAEoAxI6Cg9zZWdtZW50X3Jlc3VsdHMYBCADKAsyIS5ad2lmdFBhY2tl",
            "dE1vbml0b3IuU2VnbWVudFJlc3VsdCIRCg9Vbmtub3duTWVzc2FnZTEiEAoO",
            "VW5rbm93bk1lc3NhZ2UihwIKDlNlcnZlclRvQ2xpZW50EgwKBHRhZzEYASAB",
            "KAUSEAoIcmlkZXJfaWQYAiABKAUSEgoKd29ybGRfdGltZRgDIAEoAxINCgVz",
            "ZXFubxgEIAEoBRI2Cg1wbGF5ZXJfc3RhdGVzGAggAygLMh8uWndpZnRQYWNr",
            "ZXRNb25pdG9yLlBsYXllclN0YXRlEjoKDnBsYXllcl91cGRhdGVzGAkgAygL",
            "MiIuWndpZnRQYWNrZXRNb25pdG9yLlVua25vd25NZXNzYWdlEg0KBXRhZzEx",
            "GAsgASgDEg0KBXRhZzE3GBEgASgDEhAKCG51bV9tc2dzGBIgASgFEg4KBm1z",
            "Z251bRgTIAEoBSJ1Cg9Xb3JsZEF0dHJpYnV0ZXMSEAoId29ybGRfaWQYASAB",
            "KAUSDAoEbmFtZRgCIAEoCRIMCgR0YWczGAMgASgDEgwKBHRhZzUYBCABKAMS",
            "EgoKd29ybGRfdGltZRgGIAEoAxISCgpjbG9ja190aW1lGAcgASgDIiQKDldv",
            "cmxkQXR0cmlidXRlEhIKCndvcmxkX3RpbWUYAiABKAMiqQEKFUV2ZW50U3Vi",
            "Z3JvdXBQcm90b2J1ZhIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEg0KBXJ1",
            "bGVzGAggASgFEg0KBXJvdXRlGBYgASgFEgwKBGxhcHMYGSABKAUSFQoNc3Rh",
            "cnRMb2NhdGlvbhgdIAEoBRINCgVsYWJlbBgeIAEoBRIQCghwYWNlVHlwZRgf",
            "IAEoBRISCgpqZXJzZXlIYXNoGCQgASgFIoQCCg9SaWRlckF0dHJpYnV0ZXMS",
            "CgoCZjIYAiABKAUSCgoCZjMYAyABKAUSTgoQYXR0cmlidXRlTWVzc2FnZRgE",
            "IAEoCzI0Llp3aWZ0UGFja2V0TW9uaXRvci5SaWRlckF0dHJpYnV0ZXMuQXR0",
            "cmlidXRlTWVzc2FnZRIPCgd0aGVpcklkGAogASgFEgsKA2YxMxgNIAEoBRpr",
            "ChBBdHRyaWJ1dGVNZXNzYWdlEgwKBG15SWQYASABKAUSDwoHdGhlaXJJZBgC",
            "IAEoBRIRCglmaXJzdE5hbWUYAyABKAkSEAoIbGFzdE5hbWUYBCABKAkSEwoL",
            "Y291bnRyeUNvZGUYBSABKAUiOQoIUHJvZmlsZXMSLQoIcHJvZmlsZXMYASAD",
            "KAsyGy5ad2lmdFBhY2tldE1vbml0b3IuUHJvZmlsZSKKAwoHUHJvZmlsZRIK",
            "CgJpZBgBIAEoBRIRCglmaXJzdE5hbWUYBCABKAkSEAoIbGFzdE5hbWUYBSAB",
            "KAkSDAoEbWFsZRgGIAEoBRIOCgZ3ZWlnaHQYCSABKAUSEAoIYm9keVR5cGUY",
            "DCABKAUSEwoLY291bnRyeUNvZGUYIiABKAUSFQoNdG90YWxEaXN0YW5jZRgj",
            "IAEoBRIcChR0b3RhbERpc3RhbmNlQ2xpbWJlZBgkIAEoBRIaChJ0b3RhbFRp",
            "bWVJbk1pbnV0ZXMYJSABKAUSFgoOdG90YWxXYXR0SG91cnMYKSABKAUSDgoG",
            "aGVpZ2h0GCogASgFEh0KFXRvdGFsRXhwZXJpZW5jZVBvaW50cxguIAEoBRIY",
            "ChBhY2hpZXZlbWVudExldmVsGDEgASgFEhMKC3Bvd2VyU291cmNlGDQgASgF",
            "EgsKA2FnZRg3IAEoBRIaChJsYXVuY2hlZEdhbWVDbGllbnQYbCABKAkSGQoR",
            "Y3VycmVudEFjdGl2aXR5SWQYbSABKAUiKgoHVmVjdG9yMxIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAISCQoBehgDIAEoAiLAAQoKUGxheWVySW5mbxIKCgJpZBgB",
            "IAEoBRIKCgJmMhgCIAEoBRItCghwb3NpdGlvbhgDIAEoCzIbLlp3aWZ0UGFj",
            "a2V0TW9uaXRvci5WZWN0b3IzEg8KB3Byb2ZpbGUYBSABKAkSCwoDaWQyGAYg",
            "ASgFEgoKAmY3GAcgASgFEgwKBG5hbWUYCyABKAkSEwoLY291bnRyeUNvZGUY",
            "DCABKAUSEQoJd29ybGRUaW1lGA0gASgHEgsKA2YxNhgQIAEoBSJcCgpHVFBD",
            "MjFfNl8xEg0KBXNlcW5vGAEgASgFEjMKC3BsYXllckluZm9zGAIgAygLMh4u",
            "WndpZnRQYWNrZXRNb25pdG9yLlBsYXllckluZm8SCgoCZjMYAyABKAUiPgoI",
            "R1RQQzIxXzYSMgoKZ3RwYzIxXzZfMRgBIAMoCzIeLlp3aWZ0UGFja2V0TW9u",
            "aXRvci5HVFBDMjFfNl8xIjoKCEdUUEMyMV80EgoKAmYxGAEgASgFEgoKAmY2",
            "GAYgASgJEgoKAmY3GAcgASgFEgoKAmY4GAggASgFIiIKCEdUUEMyMV84EgoK",
            "AmYxGAEgASgFEgoKAmYyGAIgASgFIqQBCgZHVFBDMjESCgoCZjEYASABKAUS",
            "LgoIZ3RwYzIxXzQYBCABKAsyHC5ad2lmdFBhY2tldE1vbml0b3IuR1RQQzIx",
            "XzQSLgoIZ3RwYzIxXzYYBiABKAsyHC5ad2lmdFBhY2tldE1vbml0b3IuR1RQ",
            "QzIxXzYSLgoIZ3RwYzIxXzgYCCABKAsyHC5ad2lmdFBhY2tldE1vbml0b3Iu",
            "R1RQQzIxXzgiWwoSR2FtZVRvUGhvbmVDb21tYW5kEg0KBXNlcW5vGAEgASgF",
            "EgoKAmYyGAIgASgFEioKBmd0cGMyMRgVIAEoCzIaLlp3aWZ0UGFja2V0TW9u",
            "aXRvci5HVFBDMjEijwEKC0dhbWVUb1Bob25lEgoKAmYxGAEgASgFEgoKAmYy",
            "GAIgASgFEgoKAmlkGAMgASgFEgoKAmY0GAQgASgFEgoKAmY2GAYgASgFEgoK",
            "AmY3GAcgASgFEjgKCGNvbW1hbmRzGAsgAygLMiYuWndpZnRQYWNrZXRNb25p",
            "dG9yLkdhbWVUb1Bob25lQ29tbWFuZCJmCg1aTUxDbGllbnRJbmZvEhIKCmFw",
            "cFZlcnNpb24YASABKAkSFwoPc3lzdGVtT1NWZXJzaW9uGAIgASgJEhAKCHN5",
            "c3RlbU9TGAMgASgJEhYKDnN5c3RlbUhhcmR3YXJlGAQgASgJIlQKFVpNTENs",
            "aWVudENhcGFiaWxpdGllcxIKCgJmMRgBIAEoBRIvCgRpbmZvGAUgASgLMiEu",
            "WndpZnRQYWNrZXRNb25pdG9yLlpNTENsaWVudEluZm8ivAEKElBob25lVG9H",
            "YW1lQ29tbWFuZBINCgVzZXFubxgBIAEoBRIPCgdjb21tYW5kGAIgASgFEg8K",
            "B3N1YmplY3QYAyABKAUSCgoCZjUYBSABKAUSCgoCZjYYBiABKAkSCgoCZjcY",
            "ByABKAUSEAoIcGxheWVySWQYEyABKAUSPwoMY2FwYWJpbGl0aWVzGBUgASgL",
            "MikuWndpZnRQYWNrZXRNb25pdG9yLlpNTENsaWVudENhcGFiaWxpdGllcyJf",
            "CgtQaG9uZVRvR2FtZRIKCgJpZBgBIAEoBRI3Cgdjb21tYW5kGAIgASgLMiYu",
            "WndpZnRQYWNrZXRNb25pdG9yLlBob25lVG9HYW1lQ29tbWFuZBILCgNmMTAY",
            "CiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.PlayerState), global::ZwiftPacketMonitor.PlayerState.Parser, new[]{ "Id", "WorldTime", "Distance", "RoadTime", "Laps", "Speed", "RoadPosition", "CadenceUHz", "Heartrate", "Power", "Heading", "Lean", "Climbing", "Time", "F19", "F20", "Progress", "CustomisationId", "JustWatching", "Calories", "X", "Altitude", "Y", "WatchingRiderId", "GroupId", "Sport" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.ClientToServer), global::ZwiftPacketMonitor.ClientToServer.Parser, new[]{ "Connected", "RiderId", "WorldTime", "State", "Seqno", "Tag8", "Tag9", "LastUpdate", "Tag11", "LastPlayerUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.SegmentResult), global::ZwiftPacketMonitor.SegmentResult.Parser, new[]{ "Id", "RiderId", "EventSubgroupId", "FirstName", "LastName", "FinishTimeStr", "ElapsedMs", "Powermeter", "Weight", "Power", "Heartrate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.SegmentResults), global::ZwiftPacketMonitor.SegmentResults.Parser, new[]{ "WorldId", "SegmentId", "EventSubgroupId", "SegmentResults_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.UnknownMessage1), global::ZwiftPacketMonitor.UnknownMessage1.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.UnknownMessage), global::ZwiftPacketMonitor.UnknownMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.ServerToClient), global::ZwiftPacketMonitor.ServerToClient.Parser, new[]{ "Tag1", "RiderId", "WorldTime", "Seqno", "PlayerStates", "PlayerUpdates", "Tag11", "Tag17", "NumMsgs", "Msgnum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.WorldAttributes), global::ZwiftPacketMonitor.WorldAttributes.Parser, new[]{ "WorldId", "Name", "Tag3", "Tag5", "WorldTime", "ClockTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.WorldAttribute), global::ZwiftPacketMonitor.WorldAttribute.Parser, new[]{ "WorldTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.EventSubgroupProtobuf), global::ZwiftPacketMonitor.EventSubgroupProtobuf.Parser, new[]{ "Id", "Name", "Rules", "Route", "Laps", "StartLocation", "Label", "PaceType", "JerseyHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.RiderAttributes), global::ZwiftPacketMonitor.RiderAttributes.Parser, new[]{ "F2", "F3", "AttributeMessage", "TheirId", "F13" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage), global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage.Parser, new[]{ "MyId", "TheirId", "FirstName", "LastName", "CountryCode" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Profiles), global::ZwiftPacketMonitor.Profiles.Parser, new[]{ "Profiles_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Profile), global::ZwiftPacketMonitor.Profile.Parser, new[]{ "Id", "FirstName", "LastName", "Male", "Weight", "BodyType", "CountryCode", "TotalDistance", "TotalDistanceClimbed", "TotalTimeInMinutes", "TotalWattHours", "Height", "TotalExperiencePoints", "AchievementLevel", "PowerSource", "Age", "LaunchedGameClient", "CurrentActivityId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Vector3), global::ZwiftPacketMonitor.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.PlayerInfo), global::ZwiftPacketMonitor.PlayerInfo.Parser, new[]{ "Id", "F2", "Position", "Profile", "Id2", "F7", "Name", "CountryCode", "WorldTime", "F16" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.GTPC21_6_1), global::ZwiftPacketMonitor.GTPC21_6_1.Parser, new[]{ "Seqno", "PlayerInfos", "F3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.GTPC21_6), global::ZwiftPacketMonitor.GTPC21_6.Parser, new[]{ "Gtpc2161" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.GTPC21_4), global::ZwiftPacketMonitor.GTPC21_4.Parser, new[]{ "F1", "F6", "F7", "F8" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.GTPC21_8), global::ZwiftPacketMonitor.GTPC21_8.Parser, new[]{ "F1", "F2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.GTPC21), global::ZwiftPacketMonitor.GTPC21.Parser, new[]{ "F1", "Gtpc214", "Gtpc216", "Gtpc218" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.GameToPhoneCommand), global::ZwiftPacketMonitor.GameToPhoneCommand.Parser, new[]{ "Seqno", "F2", "Gtpc21" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.GameToPhone), global::ZwiftPacketMonitor.GameToPhone.Parser, new[]{ "F1", "F2", "Id", "F4", "F6", "F7", "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.ZMLClientInfo), global::ZwiftPacketMonitor.ZMLClientInfo.Parser, new[]{ "AppVersion", "SystemOSVersion", "SystemOS", "SystemHardware" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.ZMLClientCapabilities), global::ZwiftPacketMonitor.ZMLClientCapabilities.Parser, new[]{ "F1", "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.PhoneToGameCommand), global::ZwiftPacketMonitor.PhoneToGameCommand.Parser, new[]{ "Seqno", "Command", "Subject", "F5", "F6", "F7", "PlayerId", "Capabilities" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.PhoneToGame), global::ZwiftPacketMonitor.PhoneToGame.Parser, new[]{ "Id", "Command", "F10" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerState : pb::IMessage<PlayerState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState(PlayerState other) : this() {
      id_ = other.id_;
      worldTime_ = other.worldTime_;
      distance_ = other.distance_;
      roadTime_ = other.roadTime_;
      laps_ = other.laps_;
      speed_ = other.speed_;
      roadPosition_ = other.roadPosition_;
      cadenceUHz_ = other.cadenceUHz_;
      heartrate_ = other.heartrate_;
      power_ = other.power_;
      heading_ = other.heading_;
      lean_ = other.lean_;
      climbing_ = other.climbing_;
      time_ = other.time_;
      f19_ = other.f19_;
      f20_ = other.f20_;
      progress_ = other.progress_;
      customisationId_ = other.customisationId_;
      justWatching_ = other.justWatching_;
      calories_ = other.calories_;
      x_ = other.x_;
      altitude_ = other.altitude_;
      y_ = other.y_;
      watchingRiderId_ = other.watchingRiderId_;
      groupId_ = other.groupId_;
      sport_ = other.sport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState Clone() {
      return new PlayerState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "worldTime" field.</summary>
    public const int WorldTimeFieldNumber = 2;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 3;
    private int distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "roadTime" field.</summary>
    public const int RoadTimeFieldNumber = 4;
    private int roadTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadTime {
      get { return roadTime_; }
      set {
        roadTime_ = value;
      }
    }

    /// <summary>Field number for the "laps" field.</summary>
    public const int LapsFieldNumber = 5;
    private int laps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Laps {
      get { return laps_; }
      set {
        laps_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 6;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "roadPosition" field.</summary>
    public const int RoadPositionFieldNumber = 8;
    private int roadPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadPosition {
      get { return roadPosition_; }
      set {
        roadPosition_ = value;
      }
    }

    /// <summary>Field number for the "cadenceUHz" field.</summary>
    public const int CadenceUHzFieldNumber = 9;
    private int cadenceUHz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CadenceUHz {
      get { return cadenceUHz_; }
      set {
        cadenceUHz_ = value;
      }
    }

    /// <summary>Field number for the "heartrate" field.</summary>
    public const int HeartrateFieldNumber = 11;
    private int heartrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heartrate {
      get { return heartrate_; }
      set {
        heartrate_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 12;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 13;
    private long heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "lean" field.</summary>
    public const int LeanFieldNumber = 14;
    private int lean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lean {
      get { return lean_; }
      set {
        lean_ = value;
      }
    }

    /// <summary>Field number for the "climbing" field.</summary>
    public const int ClimbingFieldNumber = 15;
    private int climbing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Climbing {
      get { return climbing_; }
      set {
        climbing_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 16;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "f19" field.</summary>
    public const int F19FieldNumber = 19;
    private int f19_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F19 {
      get { return f19_; }
      set {
        f19_ = value;
      }
    }

    /// <summary>Field number for the "f20" field.</summary>
    public const int F20FieldNumber = 20;
    private int f20_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F20 {
      get { return f20_; }
      set {
        f20_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 21;
    private int progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "customisationId" field.</summary>
    public const int CustomisationIdFieldNumber = 22;
    private long customisationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CustomisationId {
      get { return customisationId_; }
      set {
        customisationId_ = value;
      }
    }

    /// <summary>Field number for the "justWatching" field.</summary>
    public const int JustWatchingFieldNumber = 23;
    private int justWatching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JustWatching {
      get { return justWatching_; }
      set {
        justWatching_ = value;
      }
    }

    /// <summary>Field number for the "calories" field.</summary>
    public const int CaloriesFieldNumber = 24;
    private int calories_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Calories {
      get { return calories_; }
      set {
        calories_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 25;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 26;
    private float altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 27;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "watchingRiderId" field.</summary>
    public const int WatchingRiderIdFieldNumber = 28;
    private int watchingRiderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WatchingRiderId {
      get { return watchingRiderId_; }
      set {
        watchingRiderId_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 29;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "sport" field.</summary>
    public const int SportFieldNumber = 31;
    private long sport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sport {
      get { return sport_; }
      set {
        sport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (WorldTime != other.WorldTime) return false;
      if (Distance != other.Distance) return false;
      if (RoadTime != other.RoadTime) return false;
      if (Laps != other.Laps) return false;
      if (Speed != other.Speed) return false;
      if (RoadPosition != other.RoadPosition) return false;
      if (CadenceUHz != other.CadenceUHz) return false;
      if (Heartrate != other.Heartrate) return false;
      if (Power != other.Power) return false;
      if (Heading != other.Heading) return false;
      if (Lean != other.Lean) return false;
      if (Climbing != other.Climbing) return false;
      if (Time != other.Time) return false;
      if (F19 != other.F19) return false;
      if (F20 != other.F20) return false;
      if (Progress != other.Progress) return false;
      if (CustomisationId != other.CustomisationId) return false;
      if (JustWatching != other.JustWatching) return false;
      if (Calories != other.Calories) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (WatchingRiderId != other.WatchingRiderId) return false;
      if (GroupId != other.GroupId) return false;
      if (Sport != other.Sport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      if (RoadTime != 0) hash ^= RoadTime.GetHashCode();
      if (Laps != 0) hash ^= Laps.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (RoadPosition != 0) hash ^= RoadPosition.GetHashCode();
      if (CadenceUHz != 0) hash ^= CadenceUHz.GetHashCode();
      if (Heartrate != 0) hash ^= Heartrate.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Heading != 0L) hash ^= Heading.GetHashCode();
      if (Lean != 0) hash ^= Lean.GetHashCode();
      if (Climbing != 0) hash ^= Climbing.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (F19 != 0) hash ^= F19.GetHashCode();
      if (F20 != 0) hash ^= F20.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (CustomisationId != 0L) hash ^= CustomisationId.GetHashCode();
      if (JustWatching != 0) hash ^= JustWatching.GetHashCode();
      if (Calories != 0) hash ^= Calories.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Altitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Altitude);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (WatchingRiderId != 0) hash ^= WatchingRiderId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (Sport != 0L) hash ^= Sport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      if (Distance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Distance);
      }
      if (RoadTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoadTime);
      }
      if (Laps != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Laps);
      }
      if (Speed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Speed);
      }
      if (RoadPosition != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoadPosition);
      }
      if (CadenceUHz != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CadenceUHz);
      }
      if (Heartrate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Heartrate);
      }
      if (Power != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Power);
      }
      if (Heading != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Heading);
      }
      if (Lean != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Lean);
      }
      if (Climbing != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Climbing);
      }
      if (Time != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Time);
      }
      if (F19 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(F19);
      }
      if (F20 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(F20);
      }
      if (Progress != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Progress);
      }
      if (CustomisationId != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(CustomisationId);
      }
      if (JustWatching != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(JustWatching);
      }
      if (Calories != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Calories);
      }
      if (X != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(X);
      }
      if (Altitude != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Altitude);
      }
      if (Y != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(Y);
      }
      if (WatchingRiderId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(WatchingRiderId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GroupId);
      }
      if (Sport != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(Sport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      if (Distance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Distance);
      }
      if (RoadTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoadTime);
      }
      if (Laps != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Laps);
      }
      if (Speed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Speed);
      }
      if (RoadPosition != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoadPosition);
      }
      if (CadenceUHz != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CadenceUHz);
      }
      if (Heartrate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Heartrate);
      }
      if (Power != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Power);
      }
      if (Heading != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Heading);
      }
      if (Lean != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Lean);
      }
      if (Climbing != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Climbing);
      }
      if (Time != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Time);
      }
      if (F19 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(F19);
      }
      if (F20 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(F20);
      }
      if (Progress != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Progress);
      }
      if (CustomisationId != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(CustomisationId);
      }
      if (JustWatching != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(JustWatching);
      }
      if (Calories != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Calories);
      }
      if (X != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(X);
      }
      if (Altitude != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Altitude);
      }
      if (Y != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(Y);
      }
      if (WatchingRiderId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(WatchingRiderId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GroupId);
      }
      if (Sport != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(Sport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      if (RoadTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadTime);
      }
      if (Laps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Laps);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (RoadPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadPosition);
      }
      if (CadenceUHz != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CadenceUHz);
      }
      if (Heartrate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heartrate);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Heading != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Heading);
      }
      if (Lean != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lean);
      }
      if (Climbing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Climbing);
      }
      if (Time != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (F19 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F19);
      }
      if (F20 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F20);
      }
      if (Progress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (CustomisationId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CustomisationId);
      }
      if (JustWatching != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JustWatching);
      }
      if (Calories != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Calories);
      }
      if (X != 0F) {
        size += 2 + 4;
      }
      if (Altitude != 0F) {
        size += 2 + 4;
      }
      if (Y != 0F) {
        size += 2 + 4;
      }
      if (WatchingRiderId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WatchingRiderId);
      }
      if (GroupId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (Sport != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Sport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      if (other.RoadTime != 0) {
        RoadTime = other.RoadTime;
      }
      if (other.Laps != 0) {
        Laps = other.Laps;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.RoadPosition != 0) {
        RoadPosition = other.RoadPosition;
      }
      if (other.CadenceUHz != 0) {
        CadenceUHz = other.CadenceUHz;
      }
      if (other.Heartrate != 0) {
        Heartrate = other.Heartrate;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Heading != 0L) {
        Heading = other.Heading;
      }
      if (other.Lean != 0) {
        Lean = other.Lean;
      }
      if (other.Climbing != 0) {
        Climbing = other.Climbing;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.F19 != 0) {
        F19 = other.F19;
      }
      if (other.F20 != 0) {
        F20 = other.F20;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.CustomisationId != 0L) {
        CustomisationId = other.CustomisationId;
      }
      if (other.JustWatching != 0) {
        JustWatching = other.JustWatching;
      }
      if (other.Calories != 0) {
        Calories = other.Calories;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Altitude != 0F) {
        Altitude = other.Altitude;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.WatchingRiderId != 0) {
        WatchingRiderId = other.WatchingRiderId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.Sport != 0L) {
        Sport = other.Sport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 24: {
            Distance = input.ReadInt32();
            break;
          }
          case 32: {
            RoadTime = input.ReadInt32();
            break;
          }
          case 40: {
            Laps = input.ReadInt32();
            break;
          }
          case 48: {
            Speed = input.ReadInt32();
            break;
          }
          case 64: {
            RoadPosition = input.ReadInt32();
            break;
          }
          case 72: {
            CadenceUHz = input.ReadInt32();
            break;
          }
          case 88: {
            Heartrate = input.ReadInt32();
            break;
          }
          case 96: {
            Power = input.ReadInt32();
            break;
          }
          case 104: {
            Heading = input.ReadInt64();
            break;
          }
          case 112: {
            Lean = input.ReadInt32();
            break;
          }
          case 120: {
            Climbing = input.ReadInt32();
            break;
          }
          case 128: {
            Time = input.ReadInt32();
            break;
          }
          case 152: {
            F19 = input.ReadInt32();
            break;
          }
          case 160: {
            F20 = input.ReadInt32();
            break;
          }
          case 168: {
            Progress = input.ReadInt32();
            break;
          }
          case 176: {
            CustomisationId = input.ReadInt64();
            break;
          }
          case 184: {
            JustWatching = input.ReadInt32();
            break;
          }
          case 192: {
            Calories = input.ReadInt32();
            break;
          }
          case 205: {
            X = input.ReadFloat();
            break;
          }
          case 213: {
            Altitude = input.ReadFloat();
            break;
          }
          case 221: {
            Y = input.ReadFloat();
            break;
          }
          case 224: {
            WatchingRiderId = input.ReadInt32();
            break;
          }
          case 232: {
            GroupId = input.ReadInt32();
            break;
          }
          case 248: {
            Sport = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 24: {
            Distance = input.ReadInt32();
            break;
          }
          case 32: {
            RoadTime = input.ReadInt32();
            break;
          }
          case 40: {
            Laps = input.ReadInt32();
            break;
          }
          case 48: {
            Speed = input.ReadInt32();
            break;
          }
          case 64: {
            RoadPosition = input.ReadInt32();
            break;
          }
          case 72: {
            CadenceUHz = input.ReadInt32();
            break;
          }
          case 88: {
            Heartrate = input.ReadInt32();
            break;
          }
          case 96: {
            Power = input.ReadInt32();
            break;
          }
          case 104: {
            Heading = input.ReadInt64();
            break;
          }
          case 112: {
            Lean = input.ReadInt32();
            break;
          }
          case 120: {
            Climbing = input.ReadInt32();
            break;
          }
          case 128: {
            Time = input.ReadInt32();
            break;
          }
          case 152: {
            F19 = input.ReadInt32();
            break;
          }
          case 160: {
            F20 = input.ReadInt32();
            break;
          }
          case 168: {
            Progress = input.ReadInt32();
            break;
          }
          case 176: {
            CustomisationId = input.ReadInt64();
            break;
          }
          case 184: {
            JustWatching = input.ReadInt32();
            break;
          }
          case 192: {
            Calories = input.ReadInt32();
            break;
          }
          case 205: {
            X = input.ReadFloat();
            break;
          }
          case 213: {
            Altitude = input.ReadFloat();
            break;
          }
          case 221: {
            Y = input.ReadFloat();
            break;
          }
          case 224: {
            WatchingRiderId = input.ReadInt32();
            break;
          }
          case 232: {
            GroupId = input.ReadInt32();
            break;
          }
          case 248: {
            Sport = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClientToServer : pb::IMessage<ClientToServer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientToServer> _parser = new pb::MessageParser<ClientToServer>(() => new ClientToServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientToServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServer(ClientToServer other) : this() {
      connected_ = other.connected_;
      riderId_ = other.riderId_;
      worldTime_ = other.worldTime_;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      seqno_ = other.seqno_;
      tag8_ = other.tag8_;
      tag9_ = other.tag9_;
      lastUpdate_ = other.lastUpdate_;
      tag11_ = other.tag11_;
      lastPlayerUpdate_ = other.lastPlayerUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServer Clone() {
      return new ClientToServer(this);
    }

    /// <summary>Field number for the "connected" field.</summary>
    public const int ConnectedFieldNumber = 1;
    private int connected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Connected {
      get { return connected_; }
      set {
        connected_ = value;
      }
    }

    /// <summary>Field number for the "rider_id" field.</summary>
    public const int RiderIdFieldNumber = 2;
    private int riderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiderId {
      get { return riderId_; }
      set {
        riderId_ = value;
      }
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 3;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 7;
    private global::ZwiftPacketMonitor.PlayerState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.PlayerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 4;
    private int seqno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seqno {
      get { return seqno_; }
      set {
        seqno_ = value;
      }
    }

    /// <summary>Field number for the "tag8" field.</summary>
    public const int Tag8FieldNumber = 8;
    private long tag8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag8 {
      get { return tag8_; }
      set {
        tag8_ = value;
      }
    }

    /// <summary>Field number for the "tag9" field.</summary>
    public const int Tag9FieldNumber = 9;
    private long tag9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag9 {
      get { return tag9_; }
      set {
        tag9_ = value;
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 10;
    private long lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "tag11" field.</summary>
    public const int Tag11FieldNumber = 11;
    private long tag11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag11 {
      get { return tag11_; }
      set {
        tag11_ = value;
      }
    }

    /// <summary>Field number for the "last_player_update" field.</summary>
    public const int LastPlayerUpdateFieldNumber = 12;
    private long lastPlayerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastPlayerUpdate {
      get { return lastPlayerUpdate_; }
      set {
        lastPlayerUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientToServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientToServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connected != other.Connected) return false;
      if (RiderId != other.RiderId) return false;
      if (WorldTime != other.WorldTime) return false;
      if (!object.Equals(State, other.State)) return false;
      if (Seqno != other.Seqno) return false;
      if (Tag8 != other.Tag8) return false;
      if (Tag9 != other.Tag9) return false;
      if (LastUpdate != other.LastUpdate) return false;
      if (Tag11 != other.Tag11) return false;
      if (LastPlayerUpdate != other.LastPlayerUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connected != 0) hash ^= Connected.GetHashCode();
      if (RiderId != 0) hash ^= RiderId.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (Seqno != 0) hash ^= Seqno.GetHashCode();
      if (Tag8 != 0L) hash ^= Tag8.GetHashCode();
      if (Tag9 != 0L) hash ^= Tag9.GetHashCode();
      if (LastUpdate != 0L) hash ^= LastUpdate.GetHashCode();
      if (Tag11 != 0L) hash ^= Tag11.GetHashCode();
      if (LastPlayerUpdate != 0L) hash ^= LastPlayerUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Connected != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Connected);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorldTime);
      }
      if (Seqno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seqno);
      }
      if (state_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(State);
      }
      if (Tag8 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Tag8);
      }
      if (Tag9 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Tag9);
      }
      if (LastUpdate != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LastUpdate);
      }
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (LastPlayerUpdate != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LastPlayerUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Connected != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Connected);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorldTime);
      }
      if (Seqno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seqno);
      }
      if (state_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(State);
      }
      if (Tag8 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Tag8);
      }
      if (Tag9 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Tag9);
      }
      if (LastUpdate != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LastUpdate);
      }
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (LastPlayerUpdate != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LastPlayerUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connected != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Connected);
      }
      if (RiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiderId);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (Seqno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seqno);
      }
      if (Tag8 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag8);
      }
      if (Tag9 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag9);
      }
      if (LastUpdate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastUpdate);
      }
      if (Tag11 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag11);
      }
      if (LastPlayerUpdate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastPlayerUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientToServer other) {
      if (other == null) {
        return;
      }
      if (other.Connected != 0) {
        Connected = other.Connected;
      }
      if (other.RiderId != 0) {
        RiderId = other.RiderId;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          State = new global::ZwiftPacketMonitor.PlayerState();
        }
        State.MergeFrom(other.State);
      }
      if (other.Seqno != 0) {
        Seqno = other.Seqno;
      }
      if (other.Tag8 != 0L) {
        Tag8 = other.Tag8;
      }
      if (other.Tag9 != 0L) {
        Tag9 = other.Tag9;
      }
      if (other.LastUpdate != 0L) {
        LastUpdate = other.LastUpdate;
      }
      if (other.Tag11 != 0L) {
        Tag11 = other.Tag11;
      }
      if (other.LastPlayerUpdate != 0L) {
        LastPlayerUpdate = other.LastPlayerUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Connected = input.ReadInt32();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 32: {
            Seqno = input.ReadInt32();
            break;
          }
          case 58: {
            if (state_ == null) {
              State = new global::ZwiftPacketMonitor.PlayerState();
            }
            input.ReadMessage(State);
            break;
          }
          case 64: {
            Tag8 = input.ReadInt64();
            break;
          }
          case 72: {
            Tag9 = input.ReadInt64();
            break;
          }
          case 80: {
            LastUpdate = input.ReadInt64();
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 96: {
            LastPlayerUpdate = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Connected = input.ReadInt32();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 32: {
            Seqno = input.ReadInt32();
            break;
          }
          case 58: {
            if (state_ == null) {
              State = new global::ZwiftPacketMonitor.PlayerState();
            }
            input.ReadMessage(State);
            break;
          }
          case 64: {
            Tag8 = input.ReadInt64();
            break;
          }
          case 72: {
            Tag9 = input.ReadInt64();
            break;
          }
          case 80: {
            LastUpdate = input.ReadInt64();
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 96: {
            LastPlayerUpdate = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SegmentResult : pb::IMessage<SegmentResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SegmentResult> _parser = new pb::MessageParser<SegmentResult>(() => new SegmentResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentResult(SegmentResult other) : this() {
      id_ = other.id_;
      riderId_ = other.riderId_;
      eventSubgroupId_ = other.eventSubgroupId_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      finishTimeStr_ = other.finishTimeStr_;
      elapsedMs_ = other.elapsedMs_;
      powermeter_ = other.powermeter_;
      weight_ = other.weight_;
      power_ = other.power_;
      heartrate_ = other.heartrate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentResult Clone() {
      return new SegmentResult(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rider_id" field.</summary>
    public const int RiderIdFieldNumber = 2;
    private long riderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RiderId {
      get { return riderId_; }
      set {
        riderId_ = value;
      }
    }

    /// <summary>Field number for the "event_subgroup_id" field.</summary>
    public const int EventSubgroupIdFieldNumber = 6;
    private long eventSubgroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventSubgroupId {
      get { return eventSubgroupId_; }
      set {
        eventSubgroupId_ = value;
      }
    }

    /// <summary>Field number for the "first_name" field.</summary>
    public const int FirstNameFieldNumber = 7;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_name" field.</summary>
    public const int LastNameFieldNumber = 8;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "finish_time_str" field.</summary>
    public const int FinishTimeStrFieldNumber = 10;
    private string finishTimeStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FinishTimeStr {
      get { return finishTimeStr_; }
      set {
        finishTimeStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elapsed_ms" field.</summary>
    public const int ElapsedMsFieldNumber = 11;
    private long elapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElapsedMs {
      get { return elapsedMs_; }
      set {
        elapsedMs_ = value;
      }
    }

    /// <summary>Field number for the "powermeter" field.</summary>
    public const int PowermeterFieldNumber = 12;
    private int powermeter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Powermeter {
      get { return powermeter_; }
      set {
        powermeter_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 13;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 15;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "heartrate" field.</summary>
    public const int HeartrateFieldNumber = 19;
    private int heartrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heartrate {
      get { return heartrate_; }
      set {
        heartrate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RiderId != other.RiderId) return false;
      if (EventSubgroupId != other.EventSubgroupId) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (FinishTimeStr != other.FinishTimeStr) return false;
      if (ElapsedMs != other.ElapsedMs) return false;
      if (Powermeter != other.Powermeter) return false;
      if (Weight != other.Weight) return false;
      if (Power != other.Power) return false;
      if (Heartrate != other.Heartrate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (RiderId != 0L) hash ^= RiderId.GetHashCode();
      if (EventSubgroupId != 0L) hash ^= EventSubgroupId.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (FinishTimeStr.Length != 0) hash ^= FinishTimeStr.GetHashCode();
      if (ElapsedMs != 0L) hash ^= ElapsedMs.GetHashCode();
      if (Powermeter != 0) hash ^= Powermeter.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Heartrate != 0) hash ^= Heartrate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (RiderId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RiderId);
      }
      if (EventSubgroupId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EventSubgroupId);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LastName);
      }
      if (FinishTimeStr.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FinishTimeStr);
      }
      if (ElapsedMs != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(ElapsedMs);
      }
      if (Powermeter != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Powermeter);
      }
      if (Weight != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Weight);
      }
      if (Power != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Power);
      }
      if (Heartrate != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Heartrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (RiderId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RiderId);
      }
      if (EventSubgroupId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EventSubgroupId);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LastName);
      }
      if (FinishTimeStr.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FinishTimeStr);
      }
      if (ElapsedMs != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(ElapsedMs);
      }
      if (Powermeter != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Powermeter);
      }
      if (Weight != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Weight);
      }
      if (Power != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Power);
      }
      if (Heartrate != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Heartrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (RiderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RiderId);
      }
      if (EventSubgroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventSubgroupId);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (FinishTimeStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FinishTimeStr);
      }
      if (ElapsedMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElapsedMs);
      }
      if (Powermeter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Powermeter);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Heartrate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Heartrate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentResult other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.RiderId != 0L) {
        RiderId = other.RiderId;
      }
      if (other.EventSubgroupId != 0L) {
        EventSubgroupId = other.EventSubgroupId;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.FinishTimeStr.Length != 0) {
        FinishTimeStr = other.FinishTimeStr;
      }
      if (other.ElapsedMs != 0L) {
        ElapsedMs = other.ElapsedMs;
      }
      if (other.Powermeter != 0) {
        Powermeter = other.Powermeter;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Heartrate != 0) {
        Heartrate = other.Heartrate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            RiderId = input.ReadInt64();
            break;
          }
          case 48: {
            EventSubgroupId = input.ReadInt64();
            break;
          }
          case 58: {
            FirstName = input.ReadString();
            break;
          }
          case 66: {
            LastName = input.ReadString();
            break;
          }
          case 82: {
            FinishTimeStr = input.ReadString();
            break;
          }
          case 88: {
            ElapsedMs = input.ReadInt64();
            break;
          }
          case 96: {
            Powermeter = input.ReadInt32();
            break;
          }
          case 104: {
            Weight = input.ReadInt32();
            break;
          }
          case 120: {
            Power = input.ReadInt32();
            break;
          }
          case 152: {
            Heartrate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            RiderId = input.ReadInt64();
            break;
          }
          case 48: {
            EventSubgroupId = input.ReadInt64();
            break;
          }
          case 58: {
            FirstName = input.ReadString();
            break;
          }
          case 66: {
            LastName = input.ReadString();
            break;
          }
          case 82: {
            FinishTimeStr = input.ReadString();
            break;
          }
          case 88: {
            ElapsedMs = input.ReadInt64();
            break;
          }
          case 96: {
            Powermeter = input.ReadInt32();
            break;
          }
          case 104: {
            Weight = input.ReadInt32();
            break;
          }
          case 120: {
            Power = input.ReadInt32();
            break;
          }
          case 152: {
            Heartrate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SegmentResults : pb::IMessage<SegmentResults>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SegmentResults> _parser = new pb::MessageParser<SegmentResults>(() => new SegmentResults());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentResults> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentResults(SegmentResults other) : this() {
      worldId_ = other.worldId_;
      segmentId_ = other.segmentId_;
      eventSubgroupId_ = other.eventSubgroupId_;
      segmentResults_ = other.segmentResults_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentResults Clone() {
      return new SegmentResults(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int WorldIdFieldNumber = 1;
    private long worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "segment_id" field.</summary>
    public const int SegmentIdFieldNumber = 2;
    private long segmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SegmentId {
      get { return segmentId_; }
      set {
        segmentId_ = value;
      }
    }

    /// <summary>Field number for the "event_subgroup_id" field.</summary>
    public const int EventSubgroupIdFieldNumber = 3;
    private long eventSubgroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventSubgroupId {
      get { return eventSubgroupId_; }
      set {
        eventSubgroupId_ = value;
      }
    }

    /// <summary>Field number for the "segment_results" field.</summary>
    public const int SegmentResults_FieldNumber = 4;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.SegmentResult> _repeated_segmentResults_codec
        = pb::FieldCodec.ForMessage(34, global::ZwiftPacketMonitor.SegmentResult.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.SegmentResult> segmentResults_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.SegmentResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.SegmentResult> SegmentResults_ {
      get { return segmentResults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentResults);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldId != other.WorldId) return false;
      if (SegmentId != other.SegmentId) return false;
      if (EventSubgroupId != other.EventSubgroupId) return false;
      if(!segmentResults_.Equals(other.segmentResults_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldId != 0L) hash ^= WorldId.GetHashCode();
      if (SegmentId != 0L) hash ^= SegmentId.GetHashCode();
      if (EventSubgroupId != 0L) hash ^= EventSubgroupId.GetHashCode();
      hash ^= segmentResults_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WorldId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WorldId);
      }
      if (SegmentId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SegmentId);
      }
      if (EventSubgroupId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EventSubgroupId);
      }
      segmentResults_.WriteTo(output, _repeated_segmentResults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WorldId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WorldId);
      }
      if (SegmentId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SegmentId);
      }
      if (EventSubgroupId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EventSubgroupId);
      }
      segmentResults_.WriteTo(ref output, _repeated_segmentResults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldId);
      }
      if (SegmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SegmentId);
      }
      if (EventSubgroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventSubgroupId);
      }
      size += segmentResults_.CalculateSize(_repeated_segmentResults_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentResults other) {
      if (other == null) {
        return;
      }
      if (other.WorldId != 0L) {
        WorldId = other.WorldId;
      }
      if (other.SegmentId != 0L) {
        SegmentId = other.SegmentId;
      }
      if (other.EventSubgroupId != 0L) {
        EventSubgroupId = other.EventSubgroupId;
      }
      segmentResults_.Add(other.segmentResults_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorldId = input.ReadInt64();
            break;
          }
          case 16: {
            SegmentId = input.ReadInt64();
            break;
          }
          case 24: {
            EventSubgroupId = input.ReadInt64();
            break;
          }
          case 34: {
            segmentResults_.AddEntriesFrom(input, _repeated_segmentResults_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WorldId = input.ReadInt64();
            break;
          }
          case 16: {
            SegmentId = input.ReadInt64();
            break;
          }
          case 24: {
            EventSubgroupId = input.ReadInt64();
            break;
          }
          case 34: {
            segmentResults_.AddEntriesFrom(ref input, _repeated_segmentResults_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// string firstName=7;
  /// string lastName=8;
  /// string timestamp=17;
  /// </summary>
  public sealed partial class UnknownMessage1 : pb::IMessage<UnknownMessage1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UnknownMessage1> _parser = new pb::MessageParser<UnknownMessage1>(() => new UnknownMessage1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnknownMessage1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage1(UnknownMessage1 other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage1 Clone() {
      return new UnknownMessage1(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnknownMessage1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnknownMessage1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnknownMessage1 other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// int64 tag1=1;
  /// UnknownMessage1 tag4=4;
  /// </summary>
  public sealed partial class UnknownMessage : pb::IMessage<UnknownMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UnknownMessage> _parser = new pb::MessageParser<UnknownMessage>(() => new UnknownMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnknownMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage(UnknownMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage Clone() {
      return new UnknownMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnknownMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnknownMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnknownMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ServerToClient : pb::IMessage<ServerToClient>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServerToClient> _parser = new pb::MessageParser<ServerToClient>(() => new ServerToClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerToClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClient(ServerToClient other) : this() {
      tag1_ = other.tag1_;
      riderId_ = other.riderId_;
      worldTime_ = other.worldTime_;
      seqno_ = other.seqno_;
      playerStates_ = other.playerStates_.Clone();
      playerUpdates_ = other.playerUpdates_.Clone();
      tag11_ = other.tag11_;
      tag17_ = other.tag17_;
      numMsgs_ = other.numMsgs_;
      msgnum_ = other.msgnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClient Clone() {
      return new ServerToClient(this);
    }

    /// <summary>Field number for the "tag1" field.</summary>
    public const int Tag1FieldNumber = 1;
    private int tag1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag1 {
      get { return tag1_; }
      set {
        tag1_ = value;
      }
    }

    /// <summary>Field number for the "rider_id" field.</summary>
    public const int RiderIdFieldNumber = 2;
    private int riderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiderId {
      get { return riderId_; }
      set {
        riderId_ = value;
      }
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 3;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 4;
    private int seqno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seqno {
      get { return seqno_; }
      set {
        seqno_ = value;
      }
    }

    /// <summary>Field number for the "player_states" field.</summary>
    public const int PlayerStatesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.PlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(66, global::ZwiftPacketMonitor.PlayerState.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerState> playerStates_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerState> PlayerStates {
      get { return playerStates_; }
    }

    /// <summary>Field number for the "player_updates" field.</summary>
    public const int PlayerUpdatesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.UnknownMessage> _repeated_playerUpdates_codec
        = pb::FieldCodec.ForMessage(74, global::ZwiftPacketMonitor.UnknownMessage.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.UnknownMessage> playerUpdates_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.UnknownMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.UnknownMessage> PlayerUpdates {
      get { return playerUpdates_; }
    }

    /// <summary>Field number for the "tag11" field.</summary>
    public const int Tag11FieldNumber = 11;
    private long tag11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag11 {
      get { return tag11_; }
      set {
        tag11_ = value;
      }
    }

    /// <summary>Field number for the "tag17" field.</summary>
    public const int Tag17FieldNumber = 17;
    private long tag17_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag17 {
      get { return tag17_; }
      set {
        tag17_ = value;
      }
    }

    /// <summary>Field number for the "num_msgs" field.</summary>
    public const int NumMsgsFieldNumber = 18;
    private int numMsgs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumMsgs {
      get { return numMsgs_; }
      set {
        numMsgs_ = value;
      }
    }

    /// <summary>Field number for the "msgnum" field.</summary>
    public const int MsgnumFieldNumber = 19;
    private int msgnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Msgnum {
      get { return msgnum_; }
      set {
        msgnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerToClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerToClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag1 != other.Tag1) return false;
      if (RiderId != other.RiderId) return false;
      if (WorldTime != other.WorldTime) return false;
      if (Seqno != other.Seqno) return false;
      if(!playerStates_.Equals(other.playerStates_)) return false;
      if(!playerUpdates_.Equals(other.playerUpdates_)) return false;
      if (Tag11 != other.Tag11) return false;
      if (Tag17 != other.Tag17) return false;
      if (NumMsgs != other.NumMsgs) return false;
      if (Msgnum != other.Msgnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag1 != 0) hash ^= Tag1.GetHashCode();
      if (RiderId != 0) hash ^= RiderId.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (Seqno != 0) hash ^= Seqno.GetHashCode();
      hash ^= playerStates_.GetHashCode();
      hash ^= playerUpdates_.GetHashCode();
      if (Tag11 != 0L) hash ^= Tag11.GetHashCode();
      if (Tag17 != 0L) hash ^= Tag17.GetHashCode();
      if (NumMsgs != 0) hash ^= NumMsgs.GetHashCode();
      if (Msgnum != 0) hash ^= Msgnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Tag1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag1);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorldTime);
      }
      if (Seqno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seqno);
      }
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      playerUpdates_.WriteTo(output, _repeated_playerUpdates_codec);
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (Tag17 != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(Tag17);
      }
      if (NumMsgs != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(NumMsgs);
      }
      if (Msgnum != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Msgnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Tag1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag1);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorldTime);
      }
      if (Seqno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seqno);
      }
      playerStates_.WriteTo(ref output, _repeated_playerStates_codec);
      playerUpdates_.WriteTo(ref output, _repeated_playerUpdates_codec);
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (Tag17 != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(Tag17);
      }
      if (NumMsgs != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(NumMsgs);
      }
      if (Msgnum != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Msgnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag1);
      }
      if (RiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiderId);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (Seqno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seqno);
      }
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      size += playerUpdates_.CalculateSize(_repeated_playerUpdates_codec);
      if (Tag11 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag11);
      }
      if (Tag17 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Tag17);
      }
      if (NumMsgs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMsgs);
      }
      if (Msgnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Msgnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerToClient other) {
      if (other == null) {
        return;
      }
      if (other.Tag1 != 0) {
        Tag1 = other.Tag1;
      }
      if (other.RiderId != 0) {
        RiderId = other.RiderId;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      if (other.Seqno != 0) {
        Seqno = other.Seqno;
      }
      playerStates_.Add(other.playerStates_);
      playerUpdates_.Add(other.playerUpdates_);
      if (other.Tag11 != 0L) {
        Tag11 = other.Tag11;
      }
      if (other.Tag17 != 0L) {
        Tag17 = other.Tag17;
      }
      if (other.NumMsgs != 0) {
        NumMsgs = other.NumMsgs;
      }
      if (other.Msgnum != 0) {
        Msgnum = other.Msgnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag1 = input.ReadInt32();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 32: {
            Seqno = input.ReadInt32();
            break;
          }
          case 66: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
          case 74: {
            playerUpdates_.AddEntriesFrom(input, _repeated_playerUpdates_codec);
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 136: {
            Tag17 = input.ReadInt64();
            break;
          }
          case 144: {
            NumMsgs = input.ReadInt32();
            break;
          }
          case 152: {
            Msgnum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tag1 = input.ReadInt32();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 32: {
            Seqno = input.ReadInt32();
            break;
          }
          case 66: {
            playerStates_.AddEntriesFrom(ref input, _repeated_playerStates_codec);
            break;
          }
          case 74: {
            playerUpdates_.AddEntriesFrom(ref input, _repeated_playerUpdates_codec);
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 136: {
            Tag17 = input.ReadInt64();
            break;
          }
          case 144: {
            NumMsgs = input.ReadInt32();
            break;
          }
          case 152: {
            Msgnum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WorldAttributes : pb::IMessage<WorldAttributes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WorldAttributes> _parser = new pb::MessageParser<WorldAttributes>(() => new WorldAttributes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttributes(WorldAttributes other) : this() {
      worldId_ = other.worldId_;
      name_ = other.name_;
      tag3_ = other.tag3_;
      tag5_ = other.tag5_;
      worldTime_ = other.worldTime_;
      clockTime_ = other.clockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttributes Clone() {
      return new WorldAttributes(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int WorldIdFieldNumber = 1;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag3" field.</summary>
    public const int Tag3FieldNumber = 3;
    private long tag3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag3 {
      get { return tag3_; }
      set {
        tag3_ = value;
      }
    }

    /// <summary>Field number for the "tag5" field.</summary>
    public const int Tag5FieldNumber = 4;
    private long tag5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag5 {
      get { return tag5_; }
      set {
        tag5_ = value;
      }
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 6;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "clock_time" field.</summary>
    public const int ClockTimeFieldNumber = 7;
    private long clockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClockTime {
      get { return clockTime_; }
      set {
        clockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldId != other.WorldId) return false;
      if (Name != other.Name) return false;
      if (Tag3 != other.Tag3) return false;
      if (Tag5 != other.Tag5) return false;
      if (WorldTime != other.WorldTime) return false;
      if (ClockTime != other.ClockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Tag3 != 0L) hash ^= Tag3.GetHashCode();
      if (Tag5 != 0L) hash ^= Tag5.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (ClockTime != 0L) hash ^= ClockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Tag3 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Tag3);
      }
      if (Tag5 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Tag5);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(WorldTime);
      }
      if (ClockTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ClockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Tag3 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Tag3);
      }
      if (Tag5 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Tag5);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(WorldTime);
      }
      if (ClockTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ClockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Tag3 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag3);
      }
      if (Tag5 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag5);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (ClockTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldAttributes other) {
      if (other == null) {
        return;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Tag3 != 0L) {
        Tag3 = other.Tag3;
      }
      if (other.Tag5 != 0L) {
        Tag5 = other.Tag5;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      if (other.ClockTime != 0L) {
        ClockTime = other.ClockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Tag3 = input.ReadInt64();
            break;
          }
          case 32: {
            Tag5 = input.ReadInt64();
            break;
          }
          case 48: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 56: {
            ClockTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Tag3 = input.ReadInt64();
            break;
          }
          case 32: {
            Tag5 = input.ReadInt64();
            break;
          }
          case 48: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 56: {
            ClockTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WorldAttribute : pb::IMessage<WorldAttribute>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WorldAttribute> _parser = new pb::MessageParser<WorldAttribute>(() => new WorldAttribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttribute(WorldAttribute other) : this() {
      worldTime_ = other.worldTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttribute Clone() {
      return new WorldAttribute(this);
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 2;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldTime != other.WorldTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldAttribute other) {
      if (other == null) {
        return;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSubgroupProtobuf : pb::IMessage<EventSubgroupProtobuf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSubgroupProtobuf> _parser = new pb::MessageParser<EventSubgroupProtobuf>(() => new EventSubgroupProtobuf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSubgroupProtobuf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSubgroupProtobuf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSubgroupProtobuf(EventSubgroupProtobuf other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      rules_ = other.rules_;
      route_ = other.route_;
      laps_ = other.laps_;
      startLocation_ = other.startLocation_;
      label_ = other.label_;
      paceType_ = other.paceType_;
      jerseyHash_ = other.jerseyHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSubgroupProtobuf Clone() {
      return new EventSubgroupProtobuf(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 8;
    private int rules_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rules {
      get { return rules_; }
      set {
        rules_ = value;
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 22;
    private int route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    /// <summary>Field number for the "laps" field.</summary>
    public const int LapsFieldNumber = 25;
    private int laps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Laps {
      get { return laps_; }
      set {
        laps_ = value;
      }
    }

    /// <summary>Field number for the "startLocation" field.</summary>
    public const int StartLocationFieldNumber = 29;
    private int startLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartLocation {
      get { return startLocation_; }
      set {
        startLocation_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 30;
    private int label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "paceType" field.</summary>
    public const int PaceTypeFieldNumber = 31;
    private int paceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaceType {
      get { return paceType_; }
      set {
        paceType_ = value;
      }
    }

    /// <summary>Field number for the "jerseyHash" field.</summary>
    public const int JerseyHashFieldNumber = 36;
    private int jerseyHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JerseyHash {
      get { return jerseyHash_; }
      set {
        jerseyHash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSubgroupProtobuf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSubgroupProtobuf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Rules != other.Rules) return false;
      if (Route != other.Route) return false;
      if (Laps != other.Laps) return false;
      if (StartLocation != other.StartLocation) return false;
      if (Label != other.Label) return false;
      if (PaceType != other.PaceType) return false;
      if (JerseyHash != other.JerseyHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rules != 0) hash ^= Rules.GetHashCode();
      if (Route != 0) hash ^= Route.GetHashCode();
      if (Laps != 0) hash ^= Laps.GetHashCode();
      if (StartLocation != 0) hash ^= StartLocation.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (PaceType != 0) hash ^= PaceType.GetHashCode();
      if (JerseyHash != 0) hash ^= JerseyHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Rules != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Rules);
      }
      if (Route != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Route);
      }
      if (Laps != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Laps);
      }
      if (StartLocation != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(StartLocation);
      }
      if (Label != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Label);
      }
      if (PaceType != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(PaceType);
      }
      if (JerseyHash != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(JerseyHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Rules != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Rules);
      }
      if (Route != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Route);
      }
      if (Laps != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Laps);
      }
      if (StartLocation != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(StartLocation);
      }
      if (Label != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Label);
      }
      if (PaceType != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(PaceType);
      }
      if (JerseyHash != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(JerseyHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rules != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rules);
      }
      if (Route != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Route);
      }
      if (Laps != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Laps);
      }
      if (StartLocation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartLocation);
      }
      if (Label != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      if (PaceType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PaceType);
      }
      if (JerseyHash != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JerseyHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSubgroupProtobuf other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rules != 0) {
        Rules = other.Rules;
      }
      if (other.Route != 0) {
        Route = other.Route;
      }
      if (other.Laps != 0) {
        Laps = other.Laps;
      }
      if (other.StartLocation != 0) {
        StartLocation = other.StartLocation;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.PaceType != 0) {
        PaceType = other.PaceType;
      }
      if (other.JerseyHash != 0) {
        JerseyHash = other.JerseyHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            Rules = input.ReadInt32();
            break;
          }
          case 176: {
            Route = input.ReadInt32();
            break;
          }
          case 200: {
            Laps = input.ReadInt32();
            break;
          }
          case 232: {
            StartLocation = input.ReadInt32();
            break;
          }
          case 240: {
            Label = input.ReadInt32();
            break;
          }
          case 248: {
            PaceType = input.ReadInt32();
            break;
          }
          case 288: {
            JerseyHash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            Rules = input.ReadInt32();
            break;
          }
          case 176: {
            Route = input.ReadInt32();
            break;
          }
          case 200: {
            Laps = input.ReadInt32();
            break;
          }
          case 232: {
            StartLocation = input.ReadInt32();
            break;
          }
          case 240: {
            Label = input.ReadInt32();
            break;
          }
          case 248: {
            PaceType = input.ReadInt32();
            break;
          }
          case 288: {
            JerseyHash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RiderAttributes : pb::IMessage<RiderAttributes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RiderAttributes> _parser = new pb::MessageParser<RiderAttributes>(() => new RiderAttributes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RiderAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiderAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiderAttributes(RiderAttributes other) : this() {
      f2_ = other.f2_;
      f3_ = other.f3_;
      attributeMessage_ = other.attributeMessage_ != null ? other.attributeMessage_.Clone() : null;
      theirId_ = other.theirId_;
      f13_ = other.f13_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiderAttributes Clone() {
      return new RiderAttributes(this);
    }

    /// <summary>Field number for the "f2" field.</summary>
    public const int F2FieldNumber = 2;
    private int f2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F2 {
      get { return f2_; }
      set {
        f2_ = value;
      }
    }

    /// <summary>Field number for the "f3" field.</summary>
    public const int F3FieldNumber = 3;
    private int f3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F3 {
      get { return f3_; }
      set {
        f3_ = value;
      }
    }

    /// <summary>Field number for the "attributeMessage" field.</summary>
    public const int AttributeMessageFieldNumber = 4;
    private global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage attributeMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage AttributeMessage {
      get { return attributeMessage_; }
      set {
        attributeMessage_ = value;
      }
    }

    /// <summary>Field number for the "theirId" field.</summary>
    public const int TheirIdFieldNumber = 10;
    private int theirId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TheirId {
      get { return theirId_; }
      set {
        theirId_ = value;
      }
    }

    /// <summary>Field number for the "f13" field.</summary>
    public const int F13FieldNumber = 13;
    private int f13_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F13 {
      get { return f13_; }
      set {
        f13_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RiderAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RiderAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F2 != other.F2) return false;
      if (F3 != other.F3) return false;
      if (!object.Equals(AttributeMessage, other.AttributeMessage)) return false;
      if (TheirId != other.TheirId) return false;
      if (F13 != other.F13) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F2 != 0) hash ^= F2.GetHashCode();
      if (F3 != 0) hash ^= F3.GetHashCode();
      if (attributeMessage_ != null) hash ^= AttributeMessage.GetHashCode();
      if (TheirId != 0) hash ^= TheirId.GetHashCode();
      if (F13 != 0) hash ^= F13.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (attributeMessage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AttributeMessage);
      }
      if (TheirId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TheirId);
      }
      if (F13 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(F13);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (attributeMessage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AttributeMessage);
      }
      if (TheirId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TheirId);
      }
      if (F13 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(F13);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F2);
      }
      if (F3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F3);
      }
      if (attributeMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttributeMessage);
      }
      if (TheirId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TheirId);
      }
      if (F13 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F13);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RiderAttributes other) {
      if (other == null) {
        return;
      }
      if (other.F2 != 0) {
        F2 = other.F2;
      }
      if (other.F3 != 0) {
        F3 = other.F3;
      }
      if (other.attributeMessage_ != null) {
        if (attributeMessage_ == null) {
          AttributeMessage = new global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage();
        }
        AttributeMessage.MergeFrom(other.AttributeMessage);
      }
      if (other.TheirId != 0) {
        TheirId = other.TheirId;
      }
      if (other.F13 != 0) {
        F13 = other.F13;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
          case 34: {
            if (attributeMessage_ == null) {
              AttributeMessage = new global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage();
            }
            input.ReadMessage(AttributeMessage);
            break;
          }
          case 80: {
            TheirId = input.ReadInt32();
            break;
          }
          case 104: {
            F13 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
          case 34: {
            if (attributeMessage_ == null) {
              AttributeMessage = new global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage();
            }
            input.ReadMessage(AttributeMessage);
            break;
          }
          case 80: {
            TheirId = input.ReadInt32();
            break;
          }
          case 104: {
            F13 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RiderAttributes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AttributeMessage : pb::IMessage<AttributeMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeMessage> _parser = new pb::MessageParser<AttributeMessage>(() => new AttributeMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ZwiftPacketMonitor.RiderAttributes.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeMessage(AttributeMessage other) : this() {
          myId_ = other.myId_;
          theirId_ = other.theirId_;
          firstName_ = other.firstName_;
          lastName_ = other.lastName_;
          countryCode_ = other.countryCode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeMessage Clone() {
          return new AttributeMessage(this);
        }

        /// <summary>Field number for the "myId" field.</summary>
        public const int MyIdFieldNumber = 1;
        private int myId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MyId {
          get { return myId_; }
          set {
            myId_ = value;
          }
        }

        /// <summary>Field number for the "theirId" field.</summary>
        public const int TheirIdFieldNumber = 2;
        private int theirId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TheirId {
          get { return theirId_; }
          set {
            theirId_ = value;
          }
        }

        /// <summary>Field number for the "firstName" field.</summary>
        public const int FirstNameFieldNumber = 3;
        private string firstName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirstName {
          get { return firstName_; }
          set {
            firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "lastName" field.</summary>
        public const int LastNameFieldNumber = 4;
        private string lastName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LastName {
          get { return lastName_; }
          set {
            lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "countryCode" field.</summary>
        public const int CountryCodeFieldNumber = 5;
        private int countryCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CountryCode {
          get { return countryCode_; }
          set {
            countryCode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MyId != other.MyId) return false;
          if (TheirId != other.TheirId) return false;
          if (FirstName != other.FirstName) return false;
          if (LastName != other.LastName) return false;
          if (CountryCode != other.CountryCode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MyId != 0) hash ^= MyId.GetHashCode();
          if (TheirId != 0) hash ^= TheirId.GetHashCode();
          if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
          if (LastName.Length != 0) hash ^= LastName.GetHashCode();
          if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (MyId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MyId);
          }
          if (TheirId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TheirId);
          }
          if (FirstName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(FirstName);
          }
          if (LastName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LastName);
          }
          if (CountryCode != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CountryCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (MyId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MyId);
          }
          if (TheirId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TheirId);
          }
          if (FirstName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(FirstName);
          }
          if (LastName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LastName);
          }
          if (CountryCode != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CountryCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MyId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyId);
          }
          if (TheirId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TheirId);
          }
          if (FirstName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
          }
          if (LastName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
          }
          if (CountryCode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeMessage other) {
          if (other == null) {
            return;
          }
          if (other.MyId != 0) {
            MyId = other.MyId;
          }
          if (other.TheirId != 0) {
            TheirId = other.TheirId;
          }
          if (other.FirstName.Length != 0) {
            FirstName = other.FirstName;
          }
          if (other.LastName.Length != 0) {
            LastName = other.LastName;
          }
          if (other.CountryCode != 0) {
            CountryCode = other.CountryCode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MyId = input.ReadInt32();
                break;
              }
              case 16: {
                TheirId = input.ReadInt32();
                break;
              }
              case 26: {
                FirstName = input.ReadString();
                break;
              }
              case 34: {
                LastName = input.ReadString();
                break;
              }
              case 40: {
                CountryCode = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MyId = input.ReadInt32();
                break;
              }
              case 16: {
                TheirId = input.ReadInt32();
                break;
              }
              case 26: {
                FirstName = input.ReadString();
                break;
              }
              case 34: {
                LastName = input.ReadString();
                break;
              }
              case 40: {
                CountryCode = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class Profiles : pb::IMessage<Profiles>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Profiles> _parser = new pb::MessageParser<Profiles>(() => new Profiles());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Profiles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profiles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profiles(Profiles other) : this() {
      profiles_ = other.profiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profiles Clone() {
      return new Profiles(this);
    }

    /// <summary>Field number for the "profiles" field.</summary>
    public const int Profiles_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.Profile> _repeated_profiles_codec
        = pb::FieldCodec.ForMessage(10, global::ZwiftPacketMonitor.Profile.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.Profile> profiles_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.Profile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.Profile> Profiles_ {
      get { return profiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Profiles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Profiles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!profiles_.Equals(other.profiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= profiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      profiles_.WriteTo(output, _repeated_profiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      profiles_.WriteTo(ref output, _repeated_profiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += profiles_.CalculateSize(_repeated_profiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Profiles other) {
      if (other == null) {
        return;
      }
      profiles_.Add(other.profiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            profiles_.AddEntriesFrom(input, _repeated_profiles_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            profiles_.AddEntriesFrom(ref input, _repeated_profiles_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Profile : pb::IMessage<Profile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Profile> _parser = new pb::MessageParser<Profile>(() => new Profile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Profile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile(Profile other) : this() {
      id_ = other.id_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      male_ = other.male_;
      weight_ = other.weight_;
      bodyType_ = other.bodyType_;
      countryCode_ = other.countryCode_;
      totalDistance_ = other.totalDistance_;
      totalDistanceClimbed_ = other.totalDistanceClimbed_;
      totalTimeInMinutes_ = other.totalTimeInMinutes_;
      totalWattHours_ = other.totalWattHours_;
      height_ = other.height_;
      totalExperiencePoints_ = other.totalExperiencePoints_;
      achievementLevel_ = other.achievementLevel_;
      powerSource_ = other.powerSource_;
      age_ = other.age_;
      launchedGameClient_ = other.launchedGameClient_;
      currentActivityId_ = other.currentActivityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile Clone() {
      return new Profile(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "firstName" field.</summary>
    public const int FirstNameFieldNumber = 4;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastName" field.</summary>
    public const int LastNameFieldNumber = 5;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "male" field.</summary>
    public const int MaleFieldNumber = 6;
    private int male_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Male {
      get { return male_; }
      set {
        male_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 9;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "bodyType" field.</summary>
    public const int BodyTypeFieldNumber = 12;
    private int bodyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BodyType {
      get { return bodyType_; }
      set {
        bodyType_ = value;
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 34;
    private int countryCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }

    /// <summary>Field number for the "totalDistance" field.</summary>
    public const int TotalDistanceFieldNumber = 35;
    private int totalDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDistance {
      get { return totalDistance_; }
      set {
        totalDistance_ = value;
      }
    }

    /// <summary>Field number for the "totalDistanceClimbed" field.</summary>
    public const int TotalDistanceClimbedFieldNumber = 36;
    private int totalDistanceClimbed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDistanceClimbed {
      get { return totalDistanceClimbed_; }
      set {
        totalDistanceClimbed_ = value;
      }
    }

    /// <summary>Field number for the "totalTimeInMinutes" field.</summary>
    public const int TotalTimeInMinutesFieldNumber = 37;
    private int totalTimeInMinutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTimeInMinutes {
      get { return totalTimeInMinutes_; }
      set {
        totalTimeInMinutes_ = value;
      }
    }

    /// <summary>Field number for the "totalWattHours" field.</summary>
    public const int TotalWattHoursFieldNumber = 41;
    private int totalWattHours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalWattHours {
      get { return totalWattHours_; }
      set {
        totalWattHours_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 42;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "totalExperiencePoints" field.</summary>
    public const int TotalExperiencePointsFieldNumber = 46;
    private int totalExperiencePoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalExperiencePoints {
      get { return totalExperiencePoints_; }
      set {
        totalExperiencePoints_ = value;
      }
    }

    /// <summary>Field number for the "achievementLevel" field.</summary>
    public const int AchievementLevelFieldNumber = 49;
    private int achievementLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AchievementLevel {
      get { return achievementLevel_; }
      set {
        achievementLevel_ = value;
      }
    }

    /// <summary>Field number for the "powerSource" field.</summary>
    public const int PowerSourceFieldNumber = 52;
    private int powerSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerSource {
      get { return powerSource_; }
      set {
        powerSource_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 55;
    private int age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "launchedGameClient" field.</summary>
    public const int LaunchedGameClientFieldNumber = 108;
    private string launchedGameClient_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaunchedGameClient {
      get { return launchedGameClient_; }
      set {
        launchedGameClient_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentActivityId" field.</summary>
    public const int CurrentActivityIdFieldNumber = 109;
    private int currentActivityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentActivityId {
      get { return currentActivityId_; }
      set {
        currentActivityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Profile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Profile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (Male != other.Male) return false;
      if (Weight != other.Weight) return false;
      if (BodyType != other.BodyType) return false;
      if (CountryCode != other.CountryCode) return false;
      if (TotalDistance != other.TotalDistance) return false;
      if (TotalDistanceClimbed != other.TotalDistanceClimbed) return false;
      if (TotalTimeInMinutes != other.TotalTimeInMinutes) return false;
      if (TotalWattHours != other.TotalWattHours) return false;
      if (Height != other.Height) return false;
      if (TotalExperiencePoints != other.TotalExperiencePoints) return false;
      if (AchievementLevel != other.AchievementLevel) return false;
      if (PowerSource != other.PowerSource) return false;
      if (Age != other.Age) return false;
      if (LaunchedGameClient != other.LaunchedGameClient) return false;
      if (CurrentActivityId != other.CurrentActivityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (Male != 0) hash ^= Male.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (BodyType != 0) hash ^= BodyType.GetHashCode();
      if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
      if (TotalDistance != 0) hash ^= TotalDistance.GetHashCode();
      if (TotalDistanceClimbed != 0) hash ^= TotalDistanceClimbed.GetHashCode();
      if (TotalTimeInMinutes != 0) hash ^= TotalTimeInMinutes.GetHashCode();
      if (TotalWattHours != 0) hash ^= TotalWattHours.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (TotalExperiencePoints != 0) hash ^= TotalExperiencePoints.GetHashCode();
      if (AchievementLevel != 0) hash ^= AchievementLevel.GetHashCode();
      if (PowerSource != 0) hash ^= PowerSource.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (LaunchedGameClient.Length != 0) hash ^= LaunchedGameClient.GetHashCode();
      if (CurrentActivityId != 0) hash ^= CurrentActivityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LastName);
      }
      if (Male != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Male);
      }
      if (Weight != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Weight);
      }
      if (BodyType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BodyType);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(CountryCode);
      }
      if (TotalDistance != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(TotalDistance);
      }
      if (TotalDistanceClimbed != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(TotalDistanceClimbed);
      }
      if (TotalTimeInMinutes != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(TotalTimeInMinutes);
      }
      if (TotalWattHours != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(TotalWattHours);
      }
      if (Height != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(Height);
      }
      if (TotalExperiencePoints != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(TotalExperiencePoints);
      }
      if (AchievementLevel != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(AchievementLevel);
      }
      if (PowerSource != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(PowerSource);
      }
      if (Age != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(Age);
      }
      if (LaunchedGameClient.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(LaunchedGameClient);
      }
      if (CurrentActivityId != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(CurrentActivityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LastName);
      }
      if (Male != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Male);
      }
      if (Weight != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Weight);
      }
      if (BodyType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BodyType);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(CountryCode);
      }
      if (TotalDistance != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(TotalDistance);
      }
      if (TotalDistanceClimbed != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(TotalDistanceClimbed);
      }
      if (TotalTimeInMinutes != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(TotalTimeInMinutes);
      }
      if (TotalWattHours != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(TotalWattHours);
      }
      if (Height != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(Height);
      }
      if (TotalExperiencePoints != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(TotalExperiencePoints);
      }
      if (AchievementLevel != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(AchievementLevel);
      }
      if (PowerSource != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(PowerSource);
      }
      if (Age != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(Age);
      }
      if (LaunchedGameClient.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(LaunchedGameClient);
      }
      if (CurrentActivityId != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(CurrentActivityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (Male != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Male);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (BodyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BodyType);
      }
      if (CountryCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
      }
      if (TotalDistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalDistance);
      }
      if (TotalDistanceClimbed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalDistanceClimbed);
      }
      if (TotalTimeInMinutes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalTimeInMinutes);
      }
      if (TotalWattHours != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalWattHours);
      }
      if (Height != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (TotalExperiencePoints != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalExperiencePoints);
      }
      if (AchievementLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AchievementLevel);
      }
      if (PowerSource != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PowerSource);
      }
      if (Age != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Age);
      }
      if (LaunchedGameClient.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LaunchedGameClient);
      }
      if (CurrentActivityId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurrentActivityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Profile other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.Male != 0) {
        Male = other.Male;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.BodyType != 0) {
        BodyType = other.BodyType;
      }
      if (other.CountryCode != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.TotalDistance != 0) {
        TotalDistance = other.TotalDistance;
      }
      if (other.TotalDistanceClimbed != 0) {
        TotalDistanceClimbed = other.TotalDistanceClimbed;
      }
      if (other.TotalTimeInMinutes != 0) {
        TotalTimeInMinutes = other.TotalTimeInMinutes;
      }
      if (other.TotalWattHours != 0) {
        TotalWattHours = other.TotalWattHours;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.TotalExperiencePoints != 0) {
        TotalExperiencePoints = other.TotalExperiencePoints;
      }
      if (other.AchievementLevel != 0) {
        AchievementLevel = other.AchievementLevel;
      }
      if (other.PowerSource != 0) {
        PowerSource = other.PowerSource;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      if (other.LaunchedGameClient.Length != 0) {
        LaunchedGameClient = other.LaunchedGameClient;
      }
      if (other.CurrentActivityId != 0) {
        CurrentActivityId = other.CurrentActivityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 34: {
            FirstName = input.ReadString();
            break;
          }
          case 42: {
            LastName = input.ReadString();
            break;
          }
          case 48: {
            Male = input.ReadInt32();
            break;
          }
          case 72: {
            Weight = input.ReadInt32();
            break;
          }
          case 96: {
            BodyType = input.ReadInt32();
            break;
          }
          case 272: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 280: {
            TotalDistance = input.ReadInt32();
            break;
          }
          case 288: {
            TotalDistanceClimbed = input.ReadInt32();
            break;
          }
          case 296: {
            TotalTimeInMinutes = input.ReadInt32();
            break;
          }
          case 328: {
            TotalWattHours = input.ReadInt32();
            break;
          }
          case 336: {
            Height = input.ReadInt32();
            break;
          }
          case 368: {
            TotalExperiencePoints = input.ReadInt32();
            break;
          }
          case 392: {
            AchievementLevel = input.ReadInt32();
            break;
          }
          case 416: {
            PowerSource = input.ReadInt32();
            break;
          }
          case 440: {
            Age = input.ReadInt32();
            break;
          }
          case 866: {
            LaunchedGameClient = input.ReadString();
            break;
          }
          case 872: {
            CurrentActivityId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 34: {
            FirstName = input.ReadString();
            break;
          }
          case 42: {
            LastName = input.ReadString();
            break;
          }
          case 48: {
            Male = input.ReadInt32();
            break;
          }
          case 72: {
            Weight = input.ReadInt32();
            break;
          }
          case 96: {
            BodyType = input.ReadInt32();
            break;
          }
          case 272: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 280: {
            TotalDistance = input.ReadInt32();
            break;
          }
          case 288: {
            TotalDistanceClimbed = input.ReadInt32();
            break;
          }
          case 296: {
            TotalTimeInMinutes = input.ReadInt32();
            break;
          }
          case 328: {
            TotalWattHours = input.ReadInt32();
            break;
          }
          case 336: {
            Height = input.ReadInt32();
            break;
          }
          case 368: {
            TotalExperiencePoints = input.ReadInt32();
            break;
          }
          case 392: {
            AchievementLevel = input.ReadInt32();
            break;
          }
          case 416: {
            PowerSource = input.ReadInt32();
            break;
          }
          case 440: {
            Age = input.ReadInt32();
            break;
          }
          case 866: {
            LaunchedGameClient = input.ReadString();
            break;
          }
          case 872: {
            CurrentActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Vector3 : pb::IMessage<Vector3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      id_ = other.id_;
      f2_ = other.f2_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      profile_ = other.profile_;
      id2_ = other.id2_;
      f7_ = other.f7_;
      name_ = other.name_;
      countryCode_ = other.countryCode_;
      worldTime_ = other.worldTime_;
      f16_ = other.f16_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "f2" field.</summary>
    public const int F2FieldNumber = 2;
    private int f2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F2 {
      get { return f2_; }
      set {
        f2_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::ZwiftPacketMonitor.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 5;
    private string profile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Profile {
      get { return profile_; }
      set {
        profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id2" field.</summary>
    public const int Id2FieldNumber = 6;
    private int id2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id2 {
      get { return id2_; }
      set {
        id2_ = value;
      }
    }

    /// <summary>Field number for the "f7" field.</summary>
    public const int F7FieldNumber = 7;
    private int f7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F7 {
      get { return f7_; }
      set {
        f7_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 11;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 12;
    private int countryCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }

    /// <summary>Field number for the "worldTime" field.</summary>
    public const int WorldTimeFieldNumber = 13;
    private uint worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "f16" field.</summary>
    public const int F16FieldNumber = 16;
    private int f16_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F16 {
      get { return f16_; }
      set {
        f16_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (F2 != other.F2) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Profile != other.Profile) return false;
      if (Id2 != other.Id2) return false;
      if (F7 != other.F7) return false;
      if (Name != other.Name) return false;
      if (CountryCode != other.CountryCode) return false;
      if (WorldTime != other.WorldTime) return false;
      if (F16 != other.F16) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (F2 != 0) hash ^= F2.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Profile.Length != 0) hash ^= Profile.GetHashCode();
      if (Id2 != 0) hash ^= Id2.GetHashCode();
      if (F7 != 0) hash ^= F7.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
      if (WorldTime != 0) hash ^= WorldTime.GetHashCode();
      if (F16 != 0) hash ^= F16.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (Profile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Profile);
      }
      if (Id2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Id2);
      }
      if (F7 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(F7);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CountryCode);
      }
      if (WorldTime != 0) {
        output.WriteRawTag(109);
        output.WriteFixed32(WorldTime);
      }
      if (F16 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(F16);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (Profile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Profile);
      }
      if (Id2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Id2);
      }
      if (F7 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(F7);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CountryCode);
      }
      if (WorldTime != 0) {
        output.WriteRawTag(109);
        output.WriteFixed32(WorldTime);
      }
      if (F16 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(F16);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (F2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F2);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Profile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Profile);
      }
      if (Id2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id2);
      }
      if (F7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F7);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CountryCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
      }
      if (WorldTime != 0) {
        size += 1 + 4;
      }
      if (F16 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F16);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.F2 != 0) {
        F2 = other.F2;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::ZwiftPacketMonitor.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Profile.Length != 0) {
        Profile = other.Profile;
      }
      if (other.Id2 != 0) {
        Id2 = other.Id2;
      }
      if (other.F7 != 0) {
        F7 = other.F7;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CountryCode != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.WorldTime != 0) {
        WorldTime = other.WorldTime;
      }
      if (other.F16 != 0) {
        F16 = other.F16;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::ZwiftPacketMonitor.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            Profile = input.ReadString();
            break;
          }
          case 48: {
            Id2 = input.ReadInt32();
            break;
          }
          case 56: {
            F7 = input.ReadInt32();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 96: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 109: {
            WorldTime = input.ReadFixed32();
            break;
          }
          case 128: {
            F16 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::ZwiftPacketMonitor.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            Profile = input.ReadString();
            break;
          }
          case 48: {
            Id2 = input.ReadInt32();
            break;
          }
          case 56: {
            F7 = input.ReadInt32();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 96: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 109: {
            WorldTime = input.ReadFixed32();
            break;
          }
          case 128: {
            F16 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GTPC21_6_1 : pb::IMessage<GTPC21_6_1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GTPC21_6_1> _parser = new pb::MessageParser<GTPC21_6_1>(() => new GTPC21_6_1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GTPC21_6_1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_6_1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_6_1(GTPC21_6_1 other) : this() {
      seqno_ = other.seqno_;
      playerInfos_ = other.playerInfos_.Clone();
      f3_ = other.f3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_6_1 Clone() {
      return new GTPC21_6_1(this);
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 1;
    private int seqno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seqno {
      get { return seqno_; }
      set {
        seqno_ = value;
      }
    }

    /// <summary>Field number for the "playerInfos" field.</summary>
    public const int PlayerInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ZwiftPacketMonitor.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    /// <summary>Field number for the "f3" field.</summary>
    public const int F3FieldNumber = 3;
    private int f3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F3 {
      get { return f3_; }
      set {
        f3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GTPC21_6_1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GTPC21_6_1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seqno != other.Seqno) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      if (F3 != other.F3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seqno != 0) hash ^= Seqno.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (F3 != 0) hash ^= F3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seqno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seqno);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seqno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seqno);
      }
      playerInfos_.WriteTo(ref output, _repeated_playerInfos_codec);
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seqno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seqno);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (F3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GTPC21_6_1 other) {
      if (other == null) {
        return;
      }
      if (other.Seqno != 0) {
        Seqno = other.Seqno;
      }
      playerInfos_.Add(other.playerInfos_);
      if (other.F3 != 0) {
        F3 = other.F3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seqno = input.ReadInt32();
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seqno = input.ReadInt32();
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(ref input, _repeated_playerInfos_codec);
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GTPC21_6 : pb::IMessage<GTPC21_6>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GTPC21_6> _parser = new pb::MessageParser<GTPC21_6>(() => new GTPC21_6());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GTPC21_6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_6(GTPC21_6 other) : this() {
      gtpc2161_ = other.gtpc2161_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_6 Clone() {
      return new GTPC21_6(this);
    }

    /// <summary>Field number for the "gtpc21_6_1" field.</summary>
    public const int Gtpc2161FieldNumber = 1;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.GTPC21_6_1> _repeated_gtpc2161_codec
        = pb::FieldCodec.ForMessage(10, global::ZwiftPacketMonitor.GTPC21_6_1.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.GTPC21_6_1> gtpc2161_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.GTPC21_6_1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.GTPC21_6_1> Gtpc2161 {
      get { return gtpc2161_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GTPC21_6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GTPC21_6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gtpc2161_.Equals(other.gtpc2161_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gtpc2161_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gtpc2161_.WriteTo(output, _repeated_gtpc2161_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gtpc2161_.WriteTo(ref output, _repeated_gtpc2161_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gtpc2161_.CalculateSize(_repeated_gtpc2161_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GTPC21_6 other) {
      if (other == null) {
        return;
      }
      gtpc2161_.Add(other.gtpc2161_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gtpc2161_.AddEntriesFrom(input, _repeated_gtpc2161_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gtpc2161_.AddEntriesFrom(ref input, _repeated_gtpc2161_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GTPC21_4 : pb::IMessage<GTPC21_4>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GTPC21_4> _parser = new pb::MessageParser<GTPC21_4>(() => new GTPC21_4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GTPC21_4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_4(GTPC21_4 other) : this() {
      f1_ = other.f1_;
      f6_ = other.f6_;
      f7_ = other.f7_;
      f8_ = other.f8_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_4 Clone() {
      return new GTPC21_4(this);
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 1;
    private int f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "f6" field.</summary>
    public const int F6FieldNumber = 6;
    private string f6_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string F6 {
      get { return f6_; }
      set {
        f6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f7" field.</summary>
    public const int F7FieldNumber = 7;
    private int f7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F7 {
      get { return f7_; }
      set {
        f7_ = value;
      }
    }

    /// <summary>Field number for the "f8" field.</summary>
    public const int F8FieldNumber = 8;
    private int f8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F8 {
      get { return f8_; }
      set {
        f8_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GTPC21_4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GTPC21_4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F1 != other.F1) return false;
      if (F6 != other.F6) return false;
      if (F7 != other.F7) return false;
      if (F8 != other.F8) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F1 != 0) hash ^= F1.GetHashCode();
      if (F6.Length != 0) hash ^= F6.GetHashCode();
      if (F7 != 0) hash ^= F7.GetHashCode();
      if (F8 != 0) hash ^= F8.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F6.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(F6);
      }
      if (F7 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(F7);
      }
      if (F8 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(F8);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F6.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(F6);
      }
      if (F7 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(F7);
      }
      if (F8 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(F8);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F1);
      }
      if (F6.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(F6);
      }
      if (F7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F7);
      }
      if (F8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F8);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GTPC21_4 other) {
      if (other == null) {
        return;
      }
      if (other.F1 != 0) {
        F1 = other.F1;
      }
      if (other.F6.Length != 0) {
        F6 = other.F6;
      }
      if (other.F7 != 0) {
        F7 = other.F7;
      }
      if (other.F8 != 0) {
        F8 = other.F8;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 50: {
            F6 = input.ReadString();
            break;
          }
          case 56: {
            F7 = input.ReadInt32();
            break;
          }
          case 64: {
            F8 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 50: {
            F6 = input.ReadString();
            break;
          }
          case 56: {
            F7 = input.ReadInt32();
            break;
          }
          case 64: {
            F8 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GTPC21_8 : pb::IMessage<GTPC21_8>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GTPC21_8> _parser = new pb::MessageParser<GTPC21_8>(() => new GTPC21_8());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GTPC21_8> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_8() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_8(GTPC21_8 other) : this() {
      f1_ = other.f1_;
      f2_ = other.f2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21_8 Clone() {
      return new GTPC21_8(this);
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 1;
    private int f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "f2" field.</summary>
    public const int F2FieldNumber = 2;
    private int f2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F2 {
      get { return f2_; }
      set {
        f2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GTPC21_8);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GTPC21_8 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F1 != other.F1) return false;
      if (F2 != other.F2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F1 != 0) hash ^= F1.GetHashCode();
      if (F2 != 0) hash ^= F2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F1);
      }
      if (F2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GTPC21_8 other) {
      if (other == null) {
        return;
      }
      if (other.F1 != 0) {
        F1 = other.F1;
      }
      if (other.F2 != 0) {
        F2 = other.F2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GTPC21 : pb::IMessage<GTPC21>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GTPC21> _parser = new pb::MessageParser<GTPC21>(() => new GTPC21());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GTPC21> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21(GTPC21 other) : this() {
      f1_ = other.f1_;
      gtpc214_ = other.gtpc214_ != null ? other.gtpc214_.Clone() : null;
      gtpc216_ = other.gtpc216_ != null ? other.gtpc216_.Clone() : null;
      gtpc218_ = other.gtpc218_ != null ? other.gtpc218_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GTPC21 Clone() {
      return new GTPC21(this);
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 1;
    private int f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "gtpc21_4" field.</summary>
    public const int Gtpc214FieldNumber = 4;
    private global::ZwiftPacketMonitor.GTPC21_4 gtpc214_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.GTPC21_4 Gtpc214 {
      get { return gtpc214_; }
      set {
        gtpc214_ = value;
      }
    }

    /// <summary>Field number for the "gtpc21_6" field.</summary>
    public const int Gtpc216FieldNumber = 6;
    private global::ZwiftPacketMonitor.GTPC21_6 gtpc216_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.GTPC21_6 Gtpc216 {
      get { return gtpc216_; }
      set {
        gtpc216_ = value;
      }
    }

    /// <summary>Field number for the "gtpc21_8" field.</summary>
    public const int Gtpc218FieldNumber = 8;
    private global::ZwiftPacketMonitor.GTPC21_8 gtpc218_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.GTPC21_8 Gtpc218 {
      get { return gtpc218_; }
      set {
        gtpc218_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GTPC21);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GTPC21 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F1 != other.F1) return false;
      if (!object.Equals(Gtpc214, other.Gtpc214)) return false;
      if (!object.Equals(Gtpc216, other.Gtpc216)) return false;
      if (!object.Equals(Gtpc218, other.Gtpc218)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F1 != 0) hash ^= F1.GetHashCode();
      if (gtpc214_ != null) hash ^= Gtpc214.GetHashCode();
      if (gtpc216_ != null) hash ^= Gtpc216.GetHashCode();
      if (gtpc218_ != null) hash ^= Gtpc218.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (gtpc214_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Gtpc214);
      }
      if (gtpc216_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gtpc216);
      }
      if (gtpc218_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Gtpc218);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (gtpc214_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Gtpc214);
      }
      if (gtpc216_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gtpc216);
      }
      if (gtpc218_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Gtpc218);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F1);
      }
      if (gtpc214_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gtpc214);
      }
      if (gtpc216_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gtpc216);
      }
      if (gtpc218_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gtpc218);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GTPC21 other) {
      if (other == null) {
        return;
      }
      if (other.F1 != 0) {
        F1 = other.F1;
      }
      if (other.gtpc214_ != null) {
        if (gtpc214_ == null) {
          Gtpc214 = new global::ZwiftPacketMonitor.GTPC21_4();
        }
        Gtpc214.MergeFrom(other.Gtpc214);
      }
      if (other.gtpc216_ != null) {
        if (gtpc216_ == null) {
          Gtpc216 = new global::ZwiftPacketMonitor.GTPC21_6();
        }
        Gtpc216.MergeFrom(other.Gtpc216);
      }
      if (other.gtpc218_ != null) {
        if (gtpc218_ == null) {
          Gtpc218 = new global::ZwiftPacketMonitor.GTPC21_8();
        }
        Gtpc218.MergeFrom(other.Gtpc218);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 34: {
            if (gtpc214_ == null) {
              Gtpc214 = new global::ZwiftPacketMonitor.GTPC21_4();
            }
            input.ReadMessage(Gtpc214);
            break;
          }
          case 50: {
            if (gtpc216_ == null) {
              Gtpc216 = new global::ZwiftPacketMonitor.GTPC21_6();
            }
            input.ReadMessage(Gtpc216);
            break;
          }
          case 66: {
            if (gtpc218_ == null) {
              Gtpc218 = new global::ZwiftPacketMonitor.GTPC21_8();
            }
            input.ReadMessage(Gtpc218);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 34: {
            if (gtpc214_ == null) {
              Gtpc214 = new global::ZwiftPacketMonitor.GTPC21_4();
            }
            input.ReadMessage(Gtpc214);
            break;
          }
          case 50: {
            if (gtpc216_ == null) {
              Gtpc216 = new global::ZwiftPacketMonitor.GTPC21_6();
            }
            input.ReadMessage(Gtpc216);
            break;
          }
          case 66: {
            if (gtpc218_ == null) {
              Gtpc218 = new global::ZwiftPacketMonitor.GTPC21_8();
            }
            input.ReadMessage(Gtpc218);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameToPhoneCommand : pb::IMessage<GameToPhoneCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameToPhoneCommand> _parser = new pb::MessageParser<GameToPhoneCommand>(() => new GameToPhoneCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameToPhoneCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameToPhoneCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameToPhoneCommand(GameToPhoneCommand other) : this() {
      seqno_ = other.seqno_;
      f2_ = other.f2_;
      gtpc21_ = other.gtpc21_ != null ? other.gtpc21_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameToPhoneCommand Clone() {
      return new GameToPhoneCommand(this);
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 1;
    private int seqno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seqno {
      get { return seqno_; }
      set {
        seqno_ = value;
      }
    }

    /// <summary>Field number for the "f2" field.</summary>
    public const int F2FieldNumber = 2;
    private int f2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F2 {
      get { return f2_; }
      set {
        f2_ = value;
      }
    }

    /// <summary>Field number for the "gtpc21" field.</summary>
    public const int Gtpc21FieldNumber = 21;
    private global::ZwiftPacketMonitor.GTPC21 gtpc21_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.GTPC21 Gtpc21 {
      get { return gtpc21_; }
      set {
        gtpc21_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameToPhoneCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameToPhoneCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seqno != other.Seqno) return false;
      if (F2 != other.F2) return false;
      if (!object.Equals(Gtpc21, other.Gtpc21)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seqno != 0) hash ^= Seqno.GetHashCode();
      if (F2 != 0) hash ^= F2.GetHashCode();
      if (gtpc21_ != null) hash ^= Gtpc21.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seqno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seqno);
      }
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (gtpc21_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Gtpc21);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seqno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seqno);
      }
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (gtpc21_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Gtpc21);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seqno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seqno);
      }
      if (F2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F2);
      }
      if (gtpc21_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gtpc21);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameToPhoneCommand other) {
      if (other == null) {
        return;
      }
      if (other.Seqno != 0) {
        Seqno = other.Seqno;
      }
      if (other.F2 != 0) {
        F2 = other.F2;
      }
      if (other.gtpc21_ != null) {
        if (gtpc21_ == null) {
          Gtpc21 = new global::ZwiftPacketMonitor.GTPC21();
        }
        Gtpc21.MergeFrom(other.Gtpc21);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seqno = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 170: {
            if (gtpc21_ == null) {
              Gtpc21 = new global::ZwiftPacketMonitor.GTPC21();
            }
            input.ReadMessage(Gtpc21);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seqno = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 170: {
            if (gtpc21_ == null) {
              Gtpc21 = new global::ZwiftPacketMonitor.GTPC21();
            }
            input.ReadMessage(Gtpc21);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameToPhone : pb::IMessage<GameToPhone>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameToPhone> _parser = new pb::MessageParser<GameToPhone>(() => new GameToPhone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameToPhone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameToPhone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameToPhone(GameToPhone other) : this() {
      f1_ = other.f1_;
      f2_ = other.f2_;
      id_ = other.id_;
      f4_ = other.f4_;
      f6_ = other.f6_;
      f7_ = other.f7_;
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameToPhone Clone() {
      return new GameToPhone(this);
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 1;
    private int f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "f2" field.</summary>
    public const int F2FieldNumber = 2;
    private int f2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F2 {
      get { return f2_; }
      set {
        f2_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "f4" field.</summary>
    public const int F4FieldNumber = 4;
    private int f4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F4 {
      get { return f4_; }
      set {
        f4_ = value;
      }
    }

    /// <summary>Field number for the "f6" field.</summary>
    public const int F6FieldNumber = 6;
    private int f6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F6 {
      get { return f6_; }
      set {
        f6_ = value;
      }
    }

    /// <summary>Field number for the "f7" field.</summary>
    public const int F7FieldNumber = 7;
    private int f7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F7 {
      get { return f7_; }
      set {
        f7_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.GameToPhoneCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(90, global::ZwiftPacketMonitor.GameToPhoneCommand.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.GameToPhoneCommand> commands_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.GameToPhoneCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.GameToPhoneCommand> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameToPhone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameToPhone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F1 != other.F1) return false;
      if (F2 != other.F2) return false;
      if (Id != other.Id) return false;
      if (F4 != other.F4) return false;
      if (F6 != other.F6) return false;
      if (F7 != other.F7) return false;
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F1 != 0) hash ^= F1.GetHashCode();
      if (F2 != 0) hash ^= F2.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (F4 != 0) hash ^= F4.GetHashCode();
      if (F6 != 0) hash ^= F6.GetHashCode();
      if (F7 != 0) hash ^= F7.GetHashCode();
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (F4 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(F4);
      }
      if (F6 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(F6);
      }
      if (F7 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(F7);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (F4 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(F4);
      }
      if (F6 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(F6);
      }
      if (F7 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(F7);
      }
      commands_.WriteTo(ref output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F1);
      }
      if (F2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F2);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (F4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F4);
      }
      if (F6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F6);
      }
      if (F7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F7);
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameToPhone other) {
      if (other == null) {
        return;
      }
      if (other.F1 != 0) {
        F1 = other.F1;
      }
      if (other.F2 != 0) {
        F2 = other.F2;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.F4 != 0) {
        F4 = other.F4;
      }
      if (other.F6 != 0) {
        F6 = other.F6;
      }
      if (other.F7 != 0) {
        F7 = other.F7;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            F4 = input.ReadInt32();
            break;
          }
          case 48: {
            F6 = input.ReadInt32();
            break;
          }
          case 56: {
            F7 = input.ReadInt32();
            break;
          }
          case 90: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            F4 = input.ReadInt32();
            break;
          }
          case 48: {
            F6 = input.ReadInt32();
            break;
          }
          case 56: {
            F7 = input.ReadInt32();
            break;
          }
          case 90: {
            commands_.AddEntriesFrom(ref input, _repeated_commands_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ZMLClientInfo : pb::IMessage<ZMLClientInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ZMLClientInfo> _parser = new pb::MessageParser<ZMLClientInfo>(() => new ZMLClientInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZMLClientInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZMLClientInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZMLClientInfo(ZMLClientInfo other) : this() {
      appVersion_ = other.appVersion_;
      systemOSVersion_ = other.systemOSVersion_;
      systemOS_ = other.systemOS_;
      systemHardware_ = other.systemHardware_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZMLClientInfo Clone() {
      return new ZMLClientInfo(this);
    }

    /// <summary>Field number for the "appVersion" field.</summary>
    public const int AppVersionFieldNumber = 1;
    private string appVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppVersion {
      get { return appVersion_; }
      set {
        appVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemOSVersion" field.</summary>
    public const int SystemOSVersionFieldNumber = 2;
    private string systemOSVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SystemOSVersion {
      get { return systemOSVersion_; }
      set {
        systemOSVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemOS" field.</summary>
    public const int SystemOSFieldNumber = 3;
    private string systemOS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SystemOS {
      get { return systemOS_; }
      set {
        systemOS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemHardware" field.</summary>
    public const int SystemHardwareFieldNumber = 4;
    private string systemHardware_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SystemHardware {
      get { return systemHardware_; }
      set {
        systemHardware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZMLClientInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZMLClientInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppVersion != other.AppVersion) return false;
      if (SystemOSVersion != other.SystemOSVersion) return false;
      if (SystemOS != other.SystemOS) return false;
      if (SystemHardware != other.SystemHardware) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppVersion.Length != 0) hash ^= AppVersion.GetHashCode();
      if (SystemOSVersion.Length != 0) hash ^= SystemOSVersion.GetHashCode();
      if (SystemOS.Length != 0) hash ^= SystemOS.GetHashCode();
      if (SystemHardware.Length != 0) hash ^= SystemHardware.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AppVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AppVersion);
      }
      if (SystemOSVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SystemOSVersion);
      }
      if (SystemOS.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SystemOS);
      }
      if (SystemHardware.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SystemHardware);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AppVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AppVersion);
      }
      if (SystemOSVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SystemOSVersion);
      }
      if (SystemOS.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SystemOS);
      }
      if (SystemHardware.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SystemHardware);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVersion);
      }
      if (SystemOSVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemOSVersion);
      }
      if (SystemOS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemOS);
      }
      if (SystemHardware.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemHardware);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZMLClientInfo other) {
      if (other == null) {
        return;
      }
      if (other.AppVersion.Length != 0) {
        AppVersion = other.AppVersion;
      }
      if (other.SystemOSVersion.Length != 0) {
        SystemOSVersion = other.SystemOSVersion;
      }
      if (other.SystemOS.Length != 0) {
        SystemOS = other.SystemOS;
      }
      if (other.SystemHardware.Length != 0) {
        SystemHardware = other.SystemHardware;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AppVersion = input.ReadString();
            break;
          }
          case 18: {
            SystemOSVersion = input.ReadString();
            break;
          }
          case 26: {
            SystemOS = input.ReadString();
            break;
          }
          case 34: {
            SystemHardware = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AppVersion = input.ReadString();
            break;
          }
          case 18: {
            SystemOSVersion = input.ReadString();
            break;
          }
          case 26: {
            SystemOS = input.ReadString();
            break;
          }
          case 34: {
            SystemHardware = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ZMLClientCapabilities : pb::IMessage<ZMLClientCapabilities>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ZMLClientCapabilities> _parser = new pb::MessageParser<ZMLClientCapabilities>(() => new ZMLClientCapabilities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZMLClientCapabilities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZMLClientCapabilities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZMLClientCapabilities(ZMLClientCapabilities other) : this() {
      f1_ = other.f1_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZMLClientCapabilities Clone() {
      return new ZMLClientCapabilities(this);
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 1;
    private int f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 5;
    private global::ZwiftPacketMonitor.ZMLClientInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.ZMLClientInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZMLClientCapabilities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZMLClientCapabilities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F1 != other.F1) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F1 != 0) hash ^= F1.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (info_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (info_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F1);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZMLClientCapabilities other) {
      if (other == null) {
        return;
      }
      if (other.F1 != 0) {
        F1 = other.F1;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::ZwiftPacketMonitor.ZMLClientInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 42: {
            if (info_ == null) {
              Info = new global::ZwiftPacketMonitor.ZMLClientInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 42: {
            if (info_ == null) {
              Info = new global::ZwiftPacketMonitor.ZMLClientInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PhoneToGameCommand : pb::IMessage<PhoneToGameCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PhoneToGameCommand> _parser = new pb::MessageParser<PhoneToGameCommand>(() => new PhoneToGameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhoneToGameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneToGameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneToGameCommand(PhoneToGameCommand other) : this() {
      seqno_ = other.seqno_;
      command_ = other.command_;
      subject_ = other.subject_;
      f5_ = other.f5_;
      f6_ = other.f6_;
      f7_ = other.f7_;
      playerId_ = other.playerId_;
      capabilities_ = other.capabilities_ != null ? other.capabilities_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneToGameCommand Clone() {
      return new PhoneToGameCommand(this);
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 1;
    private int seqno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seqno {
      get { return seqno_; }
      set {
        seqno_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private int command_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 3;
    private int subject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subject {
      get { return subject_; }
      set {
        subject_ = value;
      }
    }

    /// <summary>Field number for the "f5" field.</summary>
    public const int F5FieldNumber = 5;
    private int f5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F5 {
      get { return f5_; }
      set {
        f5_ = value;
      }
    }

    /// <summary>Field number for the "f6" field.</summary>
    public const int F6FieldNumber = 6;
    private string f6_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string F6 {
      get { return f6_; }
      set {
        f6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f7" field.</summary>
    public const int F7FieldNumber = 7;
    private int f7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F7 {
      get { return f7_; }
      set {
        f7_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 19;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "capabilities" field.</summary>
    public const int CapabilitiesFieldNumber = 21;
    private global::ZwiftPacketMonitor.ZMLClientCapabilities capabilities_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.ZMLClientCapabilities Capabilities {
      get { return capabilities_; }
      set {
        capabilities_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhoneToGameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhoneToGameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seqno != other.Seqno) return false;
      if (Command != other.Command) return false;
      if (Subject != other.Subject) return false;
      if (F5 != other.F5) return false;
      if (F6 != other.F6) return false;
      if (F7 != other.F7) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Capabilities, other.Capabilities)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seqno != 0) hash ^= Seqno.GetHashCode();
      if (Command != 0) hash ^= Command.GetHashCode();
      if (Subject != 0) hash ^= Subject.GetHashCode();
      if (F5 != 0) hash ^= F5.GetHashCode();
      if (F6.Length != 0) hash ^= F6.GetHashCode();
      if (F7 != 0) hash ^= F7.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (capabilities_ != null) hash ^= Capabilities.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seqno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seqno);
      }
      if (Command != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Command);
      }
      if (Subject != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Subject);
      }
      if (F5 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(F5);
      }
      if (F6.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(F6);
      }
      if (F7 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(F7);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(PlayerId);
      }
      if (capabilities_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Capabilities);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seqno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seqno);
      }
      if (Command != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Command);
      }
      if (Subject != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Subject);
      }
      if (F5 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(F5);
      }
      if (F6.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(F6);
      }
      if (F7 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(F7);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(PlayerId);
      }
      if (capabilities_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Capabilities);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seqno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seqno);
      }
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Command);
      }
      if (Subject != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subject);
      }
      if (F5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F5);
      }
      if (F6.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(F6);
      }
      if (F7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F7);
      }
      if (PlayerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (capabilities_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Capabilities);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhoneToGameCommand other) {
      if (other == null) {
        return;
      }
      if (other.Seqno != 0) {
        Seqno = other.Seqno;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.Subject != 0) {
        Subject = other.Subject;
      }
      if (other.F5 != 0) {
        F5 = other.F5;
      }
      if (other.F6.Length != 0) {
        F6 = other.F6;
      }
      if (other.F7 != 0) {
        F7 = other.F7;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.capabilities_ != null) {
        if (capabilities_ == null) {
          Capabilities = new global::ZwiftPacketMonitor.ZMLClientCapabilities();
        }
        Capabilities.MergeFrom(other.Capabilities);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seqno = input.ReadInt32();
            break;
          }
          case 16: {
            Command = input.ReadInt32();
            break;
          }
          case 24: {
            Subject = input.ReadInt32();
            break;
          }
          case 40: {
            F5 = input.ReadInt32();
            break;
          }
          case 50: {
            F6 = input.ReadString();
            break;
          }
          case 56: {
            F7 = input.ReadInt32();
            break;
          }
          case 152: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 170: {
            if (capabilities_ == null) {
              Capabilities = new global::ZwiftPacketMonitor.ZMLClientCapabilities();
            }
            input.ReadMessage(Capabilities);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seqno = input.ReadInt32();
            break;
          }
          case 16: {
            Command = input.ReadInt32();
            break;
          }
          case 24: {
            Subject = input.ReadInt32();
            break;
          }
          case 40: {
            F5 = input.ReadInt32();
            break;
          }
          case 50: {
            F6 = input.ReadString();
            break;
          }
          case 56: {
            F7 = input.ReadInt32();
            break;
          }
          case 152: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 170: {
            if (capabilities_ == null) {
              Capabilities = new global::ZwiftPacketMonitor.ZMLClientCapabilities();
            }
            input.ReadMessage(Capabilities);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PhoneToGame : pb::IMessage<PhoneToGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PhoneToGame> _parser = new pb::MessageParser<PhoneToGame>(() => new PhoneToGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhoneToGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneToGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneToGame(PhoneToGame other) : this() {
      id_ = other.id_;
      command_ = other.command_ != null ? other.command_.Clone() : null;
      f10_ = other.f10_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneToGame Clone() {
      return new PhoneToGame(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private global::ZwiftPacketMonitor.PhoneToGameCommand command_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.PhoneToGameCommand Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "f10" field.</summary>
    public const int F10FieldNumber = 10;
    private int f10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F10 {
      get { return f10_; }
      set {
        f10_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhoneToGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhoneToGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Command, other.Command)) return false;
      if (F10 != other.F10) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (command_ != null) hash ^= Command.GetHashCode();
      if (F10 != 0) hash ^= F10.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (command_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Command);
      }
      if (F10 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(F10);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (command_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Command);
      }
      if (F10 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(F10);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (command_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
      }
      if (F10 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F10);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhoneToGame other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.command_ != null) {
        if (command_ == null) {
          Command = new global::ZwiftPacketMonitor.PhoneToGameCommand();
        }
        Command.MergeFrom(other.Command);
      }
      if (other.F10 != 0) {
        F10 = other.F10;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (command_ == null) {
              Command = new global::ZwiftPacketMonitor.PhoneToGameCommand();
            }
            input.ReadMessage(Command);
            break;
          }
          case 80: {
            F10 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (command_ == null) {
              Command = new global::ZwiftPacketMonitor.PhoneToGameCommand();
            }
            input.ReadMessage(Command);
            break;
          }
          case 80: {
            F10 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
